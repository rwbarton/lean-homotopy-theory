import .pushout_lemmas

local attribute [instance] classical.prop_decidable

universe u

open category_theory set

namespace homotopy_theory.topological_spaces
open homotopy_theory.topological_spaces.Top
local notation `Top` := Top.{u}

def closed_t1_inclusion {A X : Top} (i : A ‚ü∂ X) : Prop :=
embedding i ‚àß is_closed (set.range i) ‚àß ‚àÄ x, x ‚àâ set.range i ‚Üí is_closed ({x} : set X)

lemma closed_t1_inclusion_of_closed_embedding_t1 {A X : Top} [t1_space X] (i : A ‚ü∂ X)
  (h‚ÇÅ : embedding i) (h‚ÇÇ : is_closed (set.range i)) : closed_t1_inclusion i :=
‚ü®h‚ÇÅ, h‚ÇÇ, Œª x _, is_closed_singleton‚ü©

lemma closed_t1_inclusion_id {X : Top} : closed_t1_inclusion (ùüô X) :=
‚ü®embedding_id, by convert is_closed_univ; exact range_id, Œª x hx, false.elim (hx ‚ü®x, rfl‚ü©)‚ü©

lemma closed_t1_inclusion_comp {X Y Z : Top} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  (hf : closed_t1_inclusion f) (hg : closed_t1_inclusion g) : closed_t1_inclusion (f ‚â´ g) :=
‚ü®hg.1.comp hf.1,
 by convert embedding_is_closed hg.1 hg.2.1 hf.2.1; apply range_comp,
 Œª z hz, if hz' : z ‚àà range g
   then let ‚ü®y, hy‚ü© := hz' in
     have y ‚àâ range f, from Œª hy', hz (by erw range_comp; exact ‚ü®y, hy', hy‚ü©),
     by convert embedding_is_closed hg.1 hg.2.1 (hf.2.2 y this); rw ‚Üêhy; simp
   else hg.2.2 z hz'‚ü©

section
parameters {A B X Y : Top} {i : A ‚ü∂ X} {f : A ‚ü∂ B} {g : X ‚ü∂ Y} {j : B ‚ü∂ Y}
parameter (po : Is_pushout i f g j)
include po

lemma closed_t1_inclusion_of_pushout (h : closed_t1_inclusion i) : closed_t1_inclusion j :=
‚ü®embedding_j_of_embedding_i po h.1,
 (range_i_closed_iff_range_j_closed po).mp h.2.1,
 Œª y hy, begin
   rw is_closed_in_pushout po, split,
   { let g' := complement_homeomorphism po (or.inl h.2.1),
     let x := g'.inv ‚ü®y, hy‚ü©,
     suffices : g ‚Åª¬π' {y} = {x.val},
     { rw this, apply h.2.2 x.val x.property },
     have g'x : g'.hom x = ‚ü®y, hy‚ü©,
     { ext,
       change (g'.inv ‚â´ g'.hom ‚â´ incl _) ‚ü®y, hy‚ü© = y,
       simp, refl },
     suffices : ‚àÄ x', g x' = y ‚Üí x' = x.val,
     { ext x',
       rw [mem_preimage, mem_singleton_iff, mem_singleton_iff],
       refine ‚ü®this x', _‚ü©,
       rintro rfl,
       convert Top.hom_congr (complement_homeomorphism_eq po (or.inl h.2.1)).symm x,
       exact congr_arg subtype.val g'x.symm },
     intros x' hx',
     have : x' ‚àâ range i,
     { rintro ‚ü®a, rfl‚ü©,
       change (i ‚â´ g) a = y at hx',
       rw po.commutes at hx',
       exact hy ‚ü®f a, hx'‚ü© },
     have : g'.hom ‚ü®x', this‚ü© = ‚ü®y, hy‚ü©,
     { ext,
       convert ‚ÜêTop.hom_congr (complement_homeomorphism_eq po (or.inl h.2.1)).symm ‚ü®x', this‚ü© },
     have : g'.hom ‚ü®x', _‚ü© = g'.hom x, from this.trans g'x.symm,
     exact congr_arg subtype.val ((homeomorphism.embedding g').inj this) },
   { convert is_closed_empty,
     rw ‚Üêpreimage_inter_range,
     convert preimage_empty,
     -- FIXME: Used to be `rwa singleton_inter_eq_empty`
     exact singleton_inter_eq_empty.mpr hy }
 end‚ü©

end

end homotopy_theory.topological_spaces
