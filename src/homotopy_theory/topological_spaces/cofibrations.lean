import category_theory.isomorphism
import homotopy_theory.formal.cylinder.hep

import .category
import .colimits
import .cylinder
import .interval_endpoints
import .pair
import .pushout_lemmas

open set

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

open homotopy_theory.cylinder

namespace homotopy_theory.topological_spaces
open homotopy_theory.topological_spaces.Top
local notation `Top` := Top.{0}

-- The classical definition of a cofibration between topological
-- spaces as a map which satisfies the homotopy extension property.
def cofibration {A X : Top} (j : A ‚ü∂ X) : Prop := hep 0 j

/-

* A cofibration in Top is an embedding. [Str√∏m, Note on cofibrations,
  Theorem 1.] Proof: Suppose j : A ‚Üí X is a cofibration. Form the
  mapping cylinder Z as the pushout shown below, with induced map
  k : Z ‚Üí IX.

      j
    A ‚Üí X = X
  i‚ÇÄ‚Üì   ‚Üì   ‚Üìi‚ÇÄ
   IA ‚Üí Z ‚Üí IX ‚Üí Z
  i‚ÇÅ‚Üë   ‚Üë   ‚Üëi‚ÇÅ
    A = A ‚Üí X
          j

  By the homotopy extension property, we can find a map r from IX back
  to Z. So Z ‚Üí X is the inclusion of a retract, hence in particular an
  embedding. The map i‚ÇÄ : A ‚Üí IA has closed image, so IA ‚Üí Z is a
  homeomorphism onto its image away from the image of i‚ÇÄ. Thus the
  composition

      i‚ÇÅ
    A ‚Üí IA ‚Üí Z ‚Üí IX

  is an embedding; but it equals i‚ÇÅ ‚àò j : A ‚Üí IX, so j : A ‚Üí X is an
  embedding as well.

-/

variables {A X : Top} {j : A ‚ü∂ X}
local notation `i` := i.{0}

lemma embedding_i {Œµ} : embedding (i Œµ @> A) :=
embedding_of_embedding_comp (p @> A) embedding_id

lemma closed_i {Œµ} : is_closed (set.range (i Œµ @> A)) :=
have is_closed {p : Top.prod A I01 | p.snd ‚àà ({I01_of_endpoint Œµ} : set I01)}, from
  continuous_iff_is_closed.mp continuous_snd _ is_closed_singleton,
begin
  convert this, ext p, cases p with a t,
  change (‚àÉ a', (a', _) = (a, t)) ‚Üî _,
  simpa using eq_comm
end

lemma disjoint_i‚ÇÄ_i‚ÇÅ : set.range (i 0 @> A) ‚à© set.range (i 1 @> A) = ‚àÖ :=
begin
  apply set.eq_empty_of_subset_empty, intros p hp,
  cases p with a t, rcases hp with ‚ü®‚ü®_, hp‚ÇÄ‚ü©, ‚ü®_, hp‚ÇÅ‚ü©‚ü©,
  have hp‚ÇÄ' : 0 = t := congr_arg prod.snd hp‚ÇÄ,
  have hp‚ÇÅ' : 1 = t := congr_arg prod.snd hp‚ÇÅ,
  have : (0 : I01) = 1 := hp‚ÇÄ'.trans hp‚ÇÅ'.symm,
  exact absurd (congr_arg subtype.val this)
    (show ¬¨(0 : ‚Ñù) = 1, by norm_num)
end

lemma embedding_of_cofibration (h : cofibration j) : embedding j :=
let po := has_pushouts.pushout (i 0 @> A) j,
    Z := po.ob,
    k : Z ‚ü∂ I.obj X :=
      po.is_pushout.induced (I &> j) (i 0 @> X) ((i 0).naturality j).symm,
    ‚ü®r, hr‚ÇÄ, hr‚ÇÅ‚ü© := h Z po.map‚ÇÅ po.map‚ÇÄ po.is_pushout.commutes.symm in
have _ := hr‚ÇÄ.symm,
have hr : r ‚àò k = ùüô _, by apply po.is_pushout.uniqueness; { rw ‚Üêassoc, simpa },
have e_z_ix : embedding k, from
  embedding_of_embedding_comp r (by rw hr; exact embedding_id),
have e_a_z : embedding (po.map‚ÇÄ ‚àò i 1 @> A), from
  comp_embedding_of_embedding_of_disjoint
    po.is_pushout (or.inl closed_i) embedding_i disjoint_i‚ÇÄ_i‚ÇÅ,
have embedding (k ‚àò (po.map‚ÇÄ ‚àò i 1 @> A)), from e_z_ix.comp e_a_z,
have embedding (i 1 @> X ‚àò j), begin
  convert this using 2,
  transitivity,
  exact (i 1).naturality j,
  simp
end,
embedding_of_embedding_comp _ this

lemma cofibration_iff_cofibered_of_embedding (e : embedding j) :
  cofibration j ‚Üî (pair.mk X (range j)).cofibered :=
let j' := Top.factor_through_incl j (range j) (subset.refl _) in
show hep 0 j ‚Üî hep 0 _, from
mem_iff_mem_of_isomorphic
  (homeomorphism_to_image_of_embedding e)
  (iso.refl X)
  (by ext p; refl)

lemma cofibration_iff_cofibered :
  cofibration j ‚Üî embedding j ‚àß (pair.mk X (range j)).cofibered :=
iff.intro
  (assume h,
    have e : embedding j := embedding_of_cofibration h,
    ‚ü®e, (cofibration_iff_cofibered_of_embedding e).mp h‚ü©)
  (assume h, (cofibration_iff_cofibered_of_embedding h.1).mpr h.2)

section relative_cylinder
noncomputable theory

variables (j) (ha : is_closed (range j))
variable (hj : cofibration j)

lemma relative_cylinder' : ‚àÉ Po : pushout (‚àÇI &> j) (ii @> A),
  cofibration (Po.is_pushout.induced (ii @> X) (I &> j) (ii.naturality _)) ‚àß
  is_closed (range (Po.is_pushout.induced (ii @> X) (I &> j) (ii.naturality _))) :=
let P : pair := pair.mk X (range j) in
let j_ : homeomorphism A P.subspace :=
  homeomorphism_to_image_of_embedding (embedding_of_cofibration hj) in
let po := pair.po P I_01 ha I_01.is_closed in
let po' := Is_pushout_of_isomorphic po.transpose (‚àÇI &> j) (ii @> A)
  ((‚àÇI.map_iso j_).trans prod_doubleton) prod_doubleton (I.map_iso j_)
  (by apply coprod.uniqueness; refl)
  (by apply coprod.uniqueness; refl) in
let ind := po'.induced (ii @> X) (I &> j) (ii.naturality _) in
have ind = pair.incl _, begin
  dsimp [ind], apply po'.uniqueness,
  { apply coprod.uniqueness; simpa },
  { simpa },
end,
‚ü®‚ü®(P ‚äó I_01).subspace, _, _, po'‚ü©,
 begin
   change cofibration ind ‚àß is_closed (range ind), rw this,
   refine ‚ü®prod_I_01_cofibered P ha (cofibration_iff_cofibered.mp hj).2, _‚ü©,
   convert @pair.prod.is_closed P I_01 ha I_01.is_closed using 1,
   apply subtype.range_val
 end‚ü©

end relative_cylinder

end homotopy_theory.topological_spaces
