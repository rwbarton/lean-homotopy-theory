import category_theory.category
import category_theory.colimits
import category_theory.colimit_lemmas
import category_theory.replete
import category_theory.pasting_pushouts

universes v u

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations

class has_cofibrations (C : Type u) [category C] :=
(is_cof : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí Prop)

def is_cof {C : Type u} [category C] [has_cofibrations C] ‚¶Éa b : C‚¶Ñ (f : a ‚ü∂ b) : Prop :=
has_cofibrations.is_cof f

/-

We gather here axioms pertaining to cofibrations common to many
notions of "categories with cofibrations".

* The cofibrations form a subcategory which includes all isomorphisms.

* Pushouts of cofibrations exist and are again cofibrations.

An isomorphism is a pushout of an identity map, so it actually
suffices to require that identities are cofibrations.

TODO: In ABC cofibration categories, some of the axioms only apply to
cofibrations with cofibrant domain. Is this sufficient for our
purposes? Useful?

-/

class precofibration_category (C : Type u) [category.{v} C]
  extends has_cofibrations C, wide_subcategory.{v} C is_cof :=
(pushout_by_cof : Œ† ‚¶Éa b a' : C‚¶Ñ (f : a ‚ü∂ b) (g : a ‚ü∂ a'), is_cof f ‚Üí pushout f g)
(pushout_is_cof : ‚àÄ ‚¶Éa b a' b' : C‚¶Ñ {f : a ‚ü∂ b} {g : a ‚ü∂ a'} {f' : a' ‚ü∂ b'} {g' : b ‚ü∂ b'},
  Is_pushout f g g' f' ‚Üí is_cof f ‚Üí is_cof f')

open precofibration_category

variables {C : Type u} [category.{v} C] [precofibration_category C]
lemma cof_id (a : C) : is_cof (ùüô a) := mem_id a
lemma cof_comp {a b c : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c} :
  is_cof f ‚Üí is_cof g ‚Üí is_cof (g ‚àò f) := mem_comp

instance precofibration_category.replete
  (C : Type u) [category.{v} C] [p : precofibration_category.{v} C] :
  replete_wide_subcategory.{v} C is_cof :=
{ mem_iso := assume a b i,
    pushout_is_cof
      (by convert Is_pushout_of_isomorphic' (Is_pushout.refl (ùüô a)) i; simp; refl)
      (cof_id a) }

lemma cof_iso {a b : C} (i : a ‚âÖ b) : is_cof i.hom := mem_iso i

-- The coproduct of cofibrations is a cofibration.
-- TODO: Should we try to express this using Is_coproduct?
-- TODO: Make `coproduct` a class and use it in notation
lemma cof_coprod [has_initial_object.{v} C] [has_coproducts.{v} C]
  {a‚ÇÄ b‚ÇÄ a‚ÇÅ b‚ÇÅ : C} {j‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} {j‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ} (h‚ÇÄ : is_cof j‚ÇÄ) (h‚ÇÅ : is_cof j‚ÇÅ) :
  is_cof (coprod_of_maps j‚ÇÄ j‚ÇÅ) :=
begin
  convert cof_comp
    (pushout_is_cof (Is_pushout_i‚ÇÄ j‚ÇÄ) h‚ÇÄ)
    (pushout_is_cof (Is_pushout_i‚ÇÅ j‚ÇÅ) h‚ÇÅ),
  apply coprod.uniqueness; { rw ‚Üêassoc, simp }
end

-- Basically the same as above, but in the slice category a/C and for
-- arbitrary (rather than chosen) pushouts.
lemma cof_pushout {a b‚ÇÄ b‚ÇÅ c b‚ÇÄ' b‚ÇÅ' c' : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
  {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} {g‚ÇÄ' : b‚ÇÄ' ‚ü∂ c'} {g‚ÇÅ' : b‚ÇÅ' ‚ü∂ c'}
  {h‚ÇÄ : b‚ÇÄ ‚ü∂ b‚ÇÄ'} {h‚ÇÅ : b‚ÇÅ ‚ü∂ b‚ÇÅ'} (hh‚ÇÄ : is_cof h‚ÇÄ) (hh‚ÇÅ : is_cof h‚ÇÅ)
  (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ) (po' : Is_pushout (h‚ÇÄ ‚àò f‚ÇÄ) (h‚ÇÅ ‚àò f‚ÇÅ) g‚ÇÄ' g‚ÇÅ') (e) :
  is_cof (po.induced (g‚ÇÄ' ‚àò h‚ÇÄ) (g‚ÇÅ' ‚àò h‚ÇÅ) e) :=
let po‚ÇÄ := pushout_by_cof h‚ÇÄ g‚ÇÄ hh‚ÇÄ,
    po‚ÇÅ := Is_pushout_of_Is_pushout_of_Is_pushout_vert po po‚ÇÄ.is_pushout,
    k‚ÇÅ := po‚ÇÅ.induced g‚ÇÄ' (g‚ÇÅ' ‚àò h‚ÇÅ) (by simpa using e) in
have k‚ÇÅ ‚àò po‚ÇÄ.map‚ÇÄ = g‚ÇÄ', by simp,
let po‚ÇÇ := Is_pushout_of_Is_pushout_of_Is_pushout' po‚ÇÅ (by convert po') (by simp) in
have k‚ÇÅ ‚àò po‚ÇÄ.map‚ÇÅ = po.induced (g‚ÇÄ' ‚àò h‚ÇÄ) (g‚ÇÅ' ‚àò h‚ÇÅ) e, begin
  apply po.uniqueness,
  { rw [‚Üêassoc, ‚Üêpo‚ÇÄ.is_pushout.commutes], simp },
  { rw [‚Üêassoc, po‚ÇÇ.commutes], simp }
end,
by rw ‚Üêthis;
   exact cof_comp (pushout_is_cof po‚ÇÄ.is_pushout hh‚ÇÄ) (pushout_is_cof po‚ÇÇ.transpose hh‚ÇÅ)

-- Suppose C has an initial object ‚àÖ. Then an object A of C is
-- cofibrant if the unique map ‚àÖ ‚Üí A is a cofibration.
variables [has_initial_object.{v} C]

def cofibrant (a : C) : Prop := is_cof (! a)

-- TODO: Apply this in many places
lemma cofibrant_of_cof {a b : C} {j : a ‚ü∂ b} (ha : cofibrant a) (hj : is_cof j) :
  cofibrant b :=
begin
  change is_cof _,
  convert cof_comp ha hj,
  apply initial.uniqueness
end

lemma cofibrant_coprod [has_initial_object.{v} C] [has_coproducts.{v} C]
  {a‚ÇÄ a‚ÇÅ : C} (h‚ÇÄ : cofibrant a‚ÇÄ) (h‚ÇÅ : cofibrant a‚ÇÅ) : cofibrant (a‚ÇÄ ‚äî a‚ÇÅ) :=
begin
  change is_cof (! _),
  convert cof_comp (cof_iso (coprod_initial_left ‚àÖ)) (cof_coprod h‚ÇÄ h‚ÇÅ),
  apply initial.uniqueness
end

lemma cof_i‚ÇÄ [has_initial_object.{v} C] [has_coproducts.{v} C]
  {a‚ÇÄ a‚ÇÅ : C} (h : cofibrant a‚ÇÅ) : is_cof (i‚ÇÄ : a‚ÇÄ ‚ü∂ a‚ÇÄ ‚äî a‚ÇÅ) :=
by convert cof_comp (cof_iso (coprod_initial_right a‚ÇÄ)) (cof_coprod (cof_id a‚ÇÄ) h);
   simp

lemma cof_i‚ÇÅ [has_initial_object.{v} C] [has_coproducts.{v} C]
  {a‚ÇÄ a‚ÇÅ : C} (h : cofibrant a‚ÇÄ) : is_cof (i‚ÇÅ : a‚ÇÅ ‚ü∂ a‚ÇÄ ‚äî a‚ÇÅ) :=
by convert cof_comp (cof_iso (coprod_initial_left a‚ÇÅ)) (cof_coprod h (cof_id a‚ÇÅ));
   simp

variables (C)
class all_objects_cofibrant [has_initial_object.{v} C] :=
(cofibrant : ‚àÄ (a : C), cofibrant a)

end homotopy_theory.cofibrations
