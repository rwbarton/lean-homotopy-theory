import category_theory.assoc_pushouts
import category_theory.eq_to_hom
import category_theory.groupoid
import category_theory.transport
import .homotopy

universes v u

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.weak_equivalences
open homotopy_theory.weak_equivalences.category_with_weak_equivalences
open precofibration_category cofibration_category

variables {C : Type u} [category.{v} C] [cofibration_category.{v} C]

-- Tracks, or "homotopies up to homotopy". This notion is a bit tricky
-- because there is no canonical choice of cylinder object on which to
-- define homotopies. Instead, we define an equivalence relation
-- between homotopies defined on different cylinder objects and define
-- a track to be an equivalence class, and then show that every
-- cylinder object admits a unique homotopy class of homotopies
-- representing each track.

variables {a b : C} {j : a ‚ü∂ b} (hj : is_cof j)
variables {x : C}
variables (f‚ÇÄ f‚ÇÅ : b ‚ü∂ x)

structure homotopy :=
(c : relative_cylinder hj)
(h : homotopy_on c f‚ÇÄ f‚ÇÅ)

variables {hj f‚ÇÄ f‚ÇÅ}
-- An extension of homotopies. These are like acyclic cofibrations in
-- a category of objects under b ‚äî‚Çê b and over b and x, where the
-- compositions b ‚äî‚Çê b ‚Üí b and b ‚äî‚Çê b ‚Üí x are given by the fold map
-- and (f‚ÇÄ, f‚ÇÅ) respectively.
structure homotopy_extension (t t' : homotopy hj f‚ÇÄ f‚ÇÅ) :=
(m : cylinder_embedding t.c t'.c)
(e : t'.h.H ‚àò m.k = t.h.H)

def homotopy_extension.refl (t : homotopy hj f‚ÇÄ f‚ÇÅ) : homotopy_extension t t :=
‚ü®cylinder_embedding.refl t.c, show _ ‚àò ùüô _ = _, by simp‚ü©

def homotopy_extension.trans {t‚ÇÄ t‚ÇÅ t‚ÇÇ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t‚ÇÄ t‚ÇÅ) (m‚ÇÅ : homotopy_extension t‚ÇÅ t‚ÇÇ) :
  homotopy_extension t‚ÇÄ t‚ÇÇ :=
‚ü®m‚ÇÄ.m.trans m‚ÇÅ.m,
 by dsimp [cylinder_embedding.trans]; rw [assoc, m‚ÇÅ.e, m‚ÇÄ.e]‚ü©

def homotopy_extension.pushout {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy hj f‚ÇÄ f‚ÇÅ :=
‚ü®cylinder_embedding.pushout m‚ÇÄ.m m‚ÇÅ.m,
 ‚ü®(cylinder_embedding.pushout.is_pushout m‚ÇÄ.m m‚ÇÅ.m).induced t‚ÇÄ.h.H t‚ÇÅ.h.H
    (by rw [m‚ÇÄ.e, m‚ÇÅ.e]),
  begin
    convert t‚ÇÅ.h.Hi‚ÇÄ using 1, unfold relative_cylinder.i‚ÇÄ,
    dsimp [cylinder_embedding.pushout], simp
  end,
  begin
    convert t‚ÇÅ.h.Hi‚ÇÅ using 1, unfold relative_cylinder.i‚ÇÅ,
    dsimp [cylinder_embedding.pushout], simp
  end‚ü©‚ü©

def homotopy_extension.pushout.map‚ÇÄ {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy_extension t‚ÇÄ (homotopy_extension.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®cylinder_embedding.pushout.map‚ÇÄ m‚ÇÄ.m m‚ÇÅ.m,
 by dsimp [cylinder_embedding.pushout.map‚ÇÄ, homotopy_extension.pushout]; simp‚ü©

def homotopy_extension.pushout.map‚ÇÅ {t t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ}
  (m‚ÇÄ : homotopy_extension t t‚ÇÄ) (m‚ÇÅ : homotopy_extension t t‚ÇÅ) :
  homotopy_extension t‚ÇÅ (homotopy_extension.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®cylinder_embedding.pushout.map‚ÇÅ m‚ÇÄ.m m‚ÇÅ.m,
 by dsimp [cylinder_embedding.pushout.map‚ÇÅ, homotopy_extension.pushout]; simp‚ü©

-- Two homotopies are equivalent if they have a common extension.
def homotopy_equiv (t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ) : Prop :=
‚àÉ t' (m‚ÇÄ : homotopy_extension t‚ÇÄ t') (m‚ÇÅ : homotopy_extension t‚ÇÅ t'), true

-- Homotopy equivalence is an equivalence relation.
lemma homotopy_equiv.refl (t : homotopy hj f‚ÇÄ f‚ÇÅ) : homotopy_equiv t t :=
‚ü®t, homotopy_extension.refl t, homotopy_extension.refl t, ‚ü®‚ü©‚ü©

lemma homotopy_equiv.symm {t‚ÇÄ t‚ÇÅ : homotopy hj f‚ÇÄ f‚ÇÅ} :
  homotopy_equiv t‚ÇÄ t‚ÇÅ ‚Üí homotopy_equiv t‚ÇÅ t‚ÇÄ :=
assume ‚ü®t', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, ‚ü®t', m‚ÇÅ, m‚ÇÄ, ‚ü®‚ü©‚ü©

lemma homotopy_equiv.trans {t‚ÇÄ t‚ÇÅ t‚ÇÇ : homotopy hj f‚ÇÄ f‚ÇÅ} :
  homotopy_equiv t‚ÇÄ t‚ÇÅ ‚Üí homotopy_equiv t‚ÇÅ t‚ÇÇ ‚Üí homotopy_equiv t‚ÇÄ t‚ÇÇ :=
assume ‚ü®t, m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü© ‚ü®t', m‚ÇÅ', m‚ÇÇ', ‚ü®‚ü©‚ü©,
‚ü®m‚ÇÅ.pushout m‚ÇÅ',
 m‚ÇÄ.trans (homotopy_extension.pushout.map‚ÇÄ m‚ÇÅ m‚ÇÅ'),
 m‚ÇÇ'.trans (homotopy_extension.pushout.map‚ÇÅ m‚ÇÅ m‚ÇÅ'),
 ‚ü®‚ü©‚ü©

structure homotopy_iso (t t' : homotopy hj f‚ÇÄ f‚ÇÅ) :=
(k : t.c.ob ‚âÖ t'.c.ob)
(hkii : k.hom ‚àò t.c.ii = t'.c.ii)
(hpk : t'.c.p ‚àò k.hom = t.c.p)
(e : t'.h.H ‚àò k.hom = t.h.H)

lemma homotopy_equiv_of_iso {t t' : homotopy hj f‚ÇÄ f‚ÇÅ} (i : homotopy_iso t t') :
  homotopy_equiv t t' :=
‚ü®t', ‚ü®‚ü®i.k.hom, cof_iso _, i.hkii, i.hpk‚ü©, i.e‚ü©, homotopy_extension.refl t', ‚ü®‚ü©‚ü©

instance homotopy_equiv.setoid : setoid (homotopy hj f‚ÇÄ f‚ÇÅ) :=
{ r := homotopy_equiv,
  iseqv :=
    ‚ü®Œª t, homotopy_equiv.refl t,
     Œª t‚ÇÄ t‚ÇÅ, homotopy_equiv.symm,
     Œª t‚ÇÄ t‚ÇÅ t‚ÇÇ, homotopy_equiv.trans‚ü© }

variables (hj f‚ÇÄ f‚ÇÅ)
def track := quotient (homotopy_equiv.setoid : setoid (homotopy hj f‚ÇÄ f‚ÇÅ))

private noncomputable def chosen_cylinder : relative_cylinder hj :=
classical.choice (exists_relative_cylinder hj)

variables {hj f‚ÇÄ f‚ÇÅ}
noncomputable def track.refl (f : b ‚ü∂ x) : track hj f f :=
‚ü¶‚ü®chosen_cylinder hj, homotopy_on.refl f‚ü©‚üß

lemma track.refl_eq {f : b ‚ü∂ x} (c : relative_cylinder hj) :
  (track.refl f : track hj f f) = ‚ü¶‚ü®c, homotopy_on.refl f‚ü©‚üß :=
quot.sound $
  let c‚ÇÄ := chosen_cylinder hj,
      ‚ü®‚ü®c', m‚ÇÄ, m‚ÇÅ‚ü©‚ü© := exists_common_embedding c‚ÇÄ c in
  ‚ü®‚ü®c', homotopy_on.refl f‚ü©,
   ‚ü®m‚ÇÄ, show f ‚àò c'.p ‚àò m‚ÇÄ.k = f ‚àò c‚ÇÄ.p, by rw [‚Üêassoc, m‚ÇÄ.hpk]‚ü©,
   ‚ü®m‚ÇÅ, show f ‚àò c'.p ‚àò m‚ÇÅ.k = f ‚àò c.p, by rw [‚Üêassoc, m‚ÇÅ.hpk]‚ü©, ‚ü®‚ü©‚ü©

local attribute [elab_with_expected_type] quotient.lift_on quotient.lift_on‚ÇÇ

def track.symm {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} : track hj f‚ÇÄ f‚ÇÅ ‚Üí track hj f‚ÇÅ f‚ÇÄ :=
Œª t, quotient.lift_on t
  (Œª t, ‚ü¶‚ü®t.c.reverse, t.h.symm‚ü©‚üß)
  (assume t t' ‚ü®t'', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound $
    ‚ü®‚ü®t''.c.reverse, t''.h.symm‚ü©, ‚ü®m‚ÇÄ.m.reverse, m‚ÇÄ.e‚ü©, ‚ü®m‚ÇÅ.m.reverse, m‚ÇÅ.e‚ü©, ‚ü®‚ü©‚ü©)

def track.trans {f‚ÇÄ f‚ÇÅ f‚ÇÇ : b ‚ü∂ x} : track hj f‚ÇÄ f‚ÇÅ ‚Üí track hj f‚ÇÅ f‚ÇÇ ‚Üí track hj f‚ÇÄ f‚ÇÇ :=
Œª t‚ÇÄ t‚ÇÅ, quotient.lift_on‚ÇÇ t‚ÇÄ t‚ÇÅ
  (Œª t‚ÇÄ t‚ÇÅ, ‚ü¶‚ü®t‚ÇÄ.c.glue t‚ÇÅ.c, t‚ÇÄ.h.trans t‚ÇÅ.h‚ü©‚üß)
  (assume t‚ÇÄ t‚ÇÅ t‚ÇÄ' t‚ÇÅ' ‚ü®t‚ÇÄ'', m‚ÇÄ‚ÇÄ, m‚ÇÄ‚ÇÅ, ‚ü®‚ü©‚ü© ‚ü®t‚ÇÅ'', m‚ÇÅ‚ÇÄ, m‚ÇÅ‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound $
    ‚ü®‚ü®t‚ÇÄ''.c.glue t‚ÇÅ''.c, t‚ÇÄ''.h.trans t‚ÇÅ''.h‚ü©,
     ‚ü®m‚ÇÄ‚ÇÄ.m.glue m‚ÇÅ‚ÇÄ.m,
      begin
        apply (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ t‚ÇÅ.c.i‚ÇÄ t‚ÇÄ.c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        dsimp [homotopy_on.trans, cylinder_embedding.glue]; rw ‚Üêassoc;
        simp [m‚ÇÄ‚ÇÄ.e, m‚ÇÅ‚ÇÄ.e],
      end‚ü©,
     ‚ü®m‚ÇÄ‚ÇÅ.m.glue m‚ÇÅ‚ÇÅ.m,
      begin
        apply (pushout_by_cof t‚ÇÄ'.c.i‚ÇÅ t‚ÇÅ'.c.i‚ÇÄ t‚ÇÄ'.c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        dsimp [homotopy_on.trans, cylinder_embedding.glue]; rw ‚Üêassoc;
        simp [m‚ÇÄ‚ÇÅ.e, m‚ÇÅ‚ÇÅ.e],
      end‚ü©, ‚ü®‚ü©‚ü©)

-- The groupoid laws.

lemma track.left_identity {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans (track.refl _) t = t :=
quotient.induction_on t $ Œª ‚ü®c‚ÇÅ, h‚ü©, quotient.sound $
  -- Set up variable names to match `exists_common_embedding` as
  -- closely as possible, so that what we construct is, in particular,
  -- a common embedding of c‚ÇÄ and c‚ÇÅ.
  let c := chosen_cylinder hj,
      c‚ÇÄ := c.glue c‚ÇÅ,
      p' : c‚ÇÄ.ob ‚ü∂ c‚ÇÅ.ob :=
        (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.induced
          (c‚ÇÅ.i‚ÇÄ ‚àò c.p) (ùüô c‚ÇÅ.ob) (by rw [‚Üêassoc, c.pi‚ÇÅ]; simp),
      po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
      pp := po.is_pushout.induced p' (ùüô c‚ÇÅ.ob) $ begin
        apply (pushout_by_cof j j hj).is_pushout.uniqueness,
        { rw [‚Üêassoc, ‚Üêassoc], change _ ‚àò c‚ÇÄ.i‚ÇÄ = _ ‚àò c‚ÇÅ.i‚ÇÄ, simp,
          rw [‚Üêassoc, c.pi‚ÇÄ], simp },
        { rw [‚Üêassoc, ‚Üêassoc], change _ ‚àò c‚ÇÄ.i‚ÇÅ = _ ‚àò c‚ÇÅ.i‚ÇÅ, simp }
      end,
      ‚ü®c'_ob, l, q', hl, hq', q'l‚ü© := factorization pp,
      cem :=
        common_embedding_of_factorization c‚ÇÄ c‚ÇÅ po c'_ob l (c‚ÇÅ.p ‚àò q')
          hl (weq_comp hq' c‚ÇÅ.hp) $ begin
            rw [‚Üêassoc, q'l],
            apply po.is_pushout.uniqueness; rw ‚Üêassoc; simp,
            apply (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
              rw ‚Üêassoc; simp; change _ = Is_pushout.induced _ _ _ _ ‚àò _,
            { simp [c‚ÇÅ.pi‚ÇÄ] }, { simp },
          end,
      h' : homotopy_on cem.c' f‚ÇÄ f‚ÇÅ :=
        ‚ü®h.H ‚àò q',
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÄ  : by simp [relative_cylinder.i‚ÇÄ]
         ... = h.H ‚àò c‚ÇÅ.i‚ÇÄ                       : by rw q'l; simp
         ... = f‚ÇÄ                                : h.Hi‚ÇÄ,
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÅ  : by simp [relative_cylinder.i‚ÇÅ]
         ... = h.H ‚àò c‚ÇÅ.i‚ÇÅ                       : by rw q'l; simp
         ... = f‚ÇÅ                                : h.Hi‚ÇÅ‚ü© in
  ‚ü®‚ü®cem.c', h'‚ü©,
   ‚ü®cem.m‚ÇÄ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÄ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÄ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÄ)        : by rw q'l
    ... = h.H ‚àò p'                    : by simp
    ... = (homotopy_on.trans (homotopy_on.refl f‚ÇÄ) h).H  : begin
      unfold homotopy_on.trans homotopy_on.refl,
      apply (pushout_by_cof c.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        rw ‚Üêassoc; simp [h.Hi‚ÇÄ]
    end‚ü©,
   ‚ü®cem.m‚ÇÅ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÅ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÅ)        : by rw q'l
    ... = h.H                         : by simp‚ü©,
   ‚ü®‚ü©‚ü©

lemma track.left_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t.symm t = track.refl _ :=
quotient.induction_on t $ Œª ‚ü®c, h‚ü©, quotient.sound $
  -- Set up variable names to match `exists_common_embedding` as
  -- closely as possible, so that what we construct is, in particular,
  -- a common embedding of c‚ÇÄ and c‚ÇÅ.
  let c‚ÇÅ := chosen_cylinder hj,
      c‚ÇÄ := c.reverse.glue c,
      p' : c‚ÇÄ.ob ‚ü∂ c.ob :=
        (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.induced
          (ùüô c.ob) (ùüô c.ob) (by simp; erw comp_id), -- Yuck
      po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
      pp := po.is_pushout.induced p' (c.i‚ÇÅ ‚àò c‚ÇÅ.p) $ begin
        apply (pushout_by_cof j j hj).is_pushout.uniqueness;
          rw [‚Üêassoc, ‚Üêassoc],
        { change _ ‚àò c‚ÇÄ.i‚ÇÄ = _ ‚àò c‚ÇÅ.i‚ÇÄ, simp,
          erw [‚Üêassoc, c‚ÇÅ.pi‚ÇÄ, comp_id], simp },
        { change _ ‚àò c‚ÇÄ.i‚ÇÅ = _ ‚àò c‚ÇÅ.i‚ÇÅ, simp, rw [‚Üêassoc, c‚ÇÅ.pi‚ÇÅ], simp }
      end,
      ‚ü®c'_ob, l, q', hl, hq', q'l‚ü© := factorization pp,
      cem :=
        common_embedding_of_factorization c‚ÇÄ c‚ÇÅ po c'_ob l (c.p ‚àò q')
          hl (weq_comp hq' c.hp) $ begin
            rw [‚Üêassoc, q'l],
            apply po.is_pushout.uniqueness; rw ‚Üêassoc; simp,
            apply (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.uniqueness;
              rw ‚Üêassoc; simp; change _ = Is_pushout.induced _ _ _ _ ‚àò _,
            { erw [id_comp, Is_pushout.induced_commutes‚ÇÄ], refl },
            { simp },
            { simp [c.pi‚ÇÅ] }    -- What is this even for?
          end,
      h' : homotopy_on cem.c' f‚ÇÅ f‚ÇÅ :=
        ‚ü®h.H ‚àò q',
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÄ  : by simp [relative_cylinder.i‚ÇÄ]
         ... = h.H ‚àò c.i‚ÇÅ ‚àò (c‚ÇÅ.p ‚àò c‚ÇÅ.i‚ÇÄ)       : by rw q'l; simp
         ... = f‚ÇÅ                                : by rw [c‚ÇÅ.pi‚ÇÄ, h.Hi‚ÇÅ]; simp,
         calc
           h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii ‚àò _)
             = h.H ‚àò (q' ‚àò l ‚àò po.map‚ÇÅ) ‚àò c‚ÇÅ.i‚ÇÅ  : by simp [relative_cylinder.i‚ÇÅ]
         ... = h.H ‚àò c.i‚ÇÅ ‚àò (c‚ÇÅ.p ‚àò c‚ÇÅ.i‚ÇÅ)       : by rw q'l; simp
         ... = f‚ÇÅ                                : by rw [c‚ÇÅ.pi‚ÇÅ, h.Hi‚ÇÅ]; simp‚ü© in
  ‚ü®‚ü®cem.c', h'‚ü©,
   ‚ü®cem.m‚ÇÄ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÄ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÄ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÄ)        : by rw q'l
    ... = h.H ‚àò p'                    : by simp
    ... = (homotopy_on.trans h.symm h).H  : begin
      unfold homotopy_on.trans homotopy_on.symm,
      apply (pushout_by_cof c.reverse.i‚ÇÅ c.i‚ÇÄ c.reverse.acof_i‚ÇÅ.1).is_pushout.uniqueness;
        rw ‚Üêassoc; simp; erw id_comp
    end‚ü©,
   ‚ü®cem.m‚ÇÅ, calc
      h.H ‚àò q' ‚àò (l ‚àò po.map‚ÇÅ)
        = h.H ‚àò ((q' ‚àò l) ‚àò po.map‚ÇÅ)  : by simp
    ... = h.H ‚àò (pp ‚àò po.map‚ÇÅ)        : by rw q'l
    ... = h.H ‚àò c.i‚ÇÅ ‚àò c‚ÇÅ.p           : by simp
    ... = (homotopy_on.refl f‚ÇÅ).H     : by rw h.Hi‚ÇÅ; refl‚ü©,
   ‚ü®‚ü©‚ü©

lemma track.inverse_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} {t : track hj f‚ÇÄ f‚ÇÅ} :
  t.symm.symm = t :=
-- t.symm.symm and t are homotopies defined on cylinder objects which
-- are equal, but not definitionally equal. Rather than dealing with
-- heterogeneous equality between the homotopies, it's easier to just
-- use `homotopy_equiv_of_iso`.
quotient.induction_on t $ Œª t, quotient.sound $ homotopy_equiv_of_iso $
  ‚ü®iso.refl _,
   by apply (pushout_by_cof j j hj).is_pushout.uniqueness;
      dsimp [relative_cylinder.reverse, Is_pushout.swap];
      rw [‚Üêassoc, ‚Üêassoc, ‚Üêassoc]; simp,
   by dsimp [relative_cylinder.reverse]; simp,
   by simp [homotopy_on.symm]‚ü©

lemma track.right_inverse {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t t.symm = track.refl _ :=
by convert track.left_inverse t.symm; rw track.inverse_inverse

lemma track.assoc {f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ : b ‚ü∂ x}
  (t‚ÇÄ : track hj f‚ÇÄ f‚ÇÅ) (t‚ÇÅ : track hj f‚ÇÅ f‚ÇÇ) (t‚ÇÇ : track hj f‚ÇÇ f‚ÇÉ) :
  (t‚ÇÄ.trans t‚ÇÅ).trans t‚ÇÇ = t‚ÇÄ.trans (t‚ÇÅ.trans t‚ÇÇ) :=
quotient.induction_on‚ÇÉ t‚ÇÄ t‚ÇÅ t‚ÇÇ $ Œª t‚ÇÄ t‚ÇÅ t‚ÇÇ, quotient.sound $ homotopy_equiv_of_iso
  ‚ü®Is_pushout_assoc
     (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ t‚ÇÅ.c.i‚ÇÄ t‚ÇÄ.c.acof_i‚ÇÅ.1).is_pushout
     (by convert (pushout_by_cof (t‚ÇÄ.c.glue t‚ÇÅ.c).i‚ÇÅ t‚ÇÇ.c.i‚ÇÄ _).is_pushout using 1; simp)
     (pushout_by_cof t‚ÇÅ.c.i‚ÇÅ t‚ÇÇ.c.i‚ÇÄ t‚ÇÅ.c.acof_i‚ÇÅ.1).is_pushout
     (by convert (pushout_by_cof t‚ÇÄ.c.i‚ÇÅ (t‚ÇÅ.c.glue t‚ÇÇ.c).i‚ÇÄ _).is_pushout using 1; simp),
   begin
     apply (pushout_by_cof j j hj).is_pushout.uniqueness; rw ‚Üêassoc,
     { change _ ‚àò relative_cylinder.i‚ÇÄ _ = relative_cylinder.i‚ÇÄ _, simp },
     { change _ ‚àò relative_cylinder.i‚ÇÅ _ = relative_cylinder.i‚ÇÅ _, simp }
   end,
   begin
     symmetry,
     apply Is_pushout_assoc_uniqueness;
       dsimp [relative_cylinder.glue]; simp
   end,
   begin
     symmetry,
     apply Is_pushout_assoc_uniqueness;
       dsimp [relative_cylinder.glue, homotopy_on.trans]; simp
   end‚ü©

lemma track.right_identity {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track.trans t (track.refl _) = t :=
calc
  t.trans (track.refl _)
    = t.trans (t.symm.trans t) : by rw track.left_inverse
... = (t.trans t.symm).trans t : by rw track.assoc
... = (track.refl _).trans t   : by rw track.right_inverse
... = t                        : by rw track.left_identity

section
variables (hj x)
include hj
def track_groupoid_rel := b ‚ü∂ x
end

noncomputable instance : groupoid (track_groupoid_rel hj x) :=
{ hom := Œª f‚ÇÄ f‚ÇÅ, track hj f‚ÇÄ f‚ÇÅ,
  id := Œª f, track.refl f,
  comp := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ t‚ÇÄ t‚ÇÅ, t‚ÇÄ.trans t‚ÇÅ,
  inv := Œª f‚ÇÄ f‚ÇÅ t, t.symm,

  id_comp' := Œª f‚ÇÄ f‚ÇÅ, track.left_identity,
  comp_id' := Œª f‚ÇÄ f‚ÇÅ, track.right_identity,
  assoc' := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ f‚ÇÉ, track.assoc,
  inv_comp' := Œª f‚ÇÄ f‚ÇÅ, track.left_inverse,
  comp_inv' := Œª f‚ÇÄ f‚ÇÅ, track.right_inverse }

section functoriality

variables {y : C} (g : x ‚ü∂ y)

def track.congr_left {f‚ÇÄ f‚ÇÅ : b ‚ü∂ x} (t : track hj f‚ÇÄ f‚ÇÅ) :
  track hj (g ‚àò f‚ÇÄ) (g ‚àò f‚ÇÅ) :=
quotient.lift_on t
  (Œª t, ‚ü¶‚ü®t.c, t.h.congr_left hj g‚ü©‚üß)
  (Œª t t' ‚ü®t'', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü©, quotient.sound
     ‚ü®‚ü®t''.c, t''.h.congr_left hj g‚ü©,
      ‚ü®m‚ÇÄ.m, show (g ‚àò _) ‚àò _ = _, by rw [‚Üêassoc, m‚ÇÄ.e]; refl‚ü©,
      ‚ü®m‚ÇÅ.m, show (g ‚àò _) ‚àò _ = _, by rw [‚Üêassoc, m‚ÇÅ.e]; refl‚ü©,
      ‚ü®‚ü©‚ü©)

noncomputable def track_groupoid_rel_functor {y} (g : x ‚ü∂ y) :
  track_groupoid_rel hj x ‚Üù track_groupoid_rel hj y :=
{ obj := Œª f, g ‚àò f,
  map := Œª f‚ÇÄ f‚ÇÅ t, t.congr_left g,
  map_id' := Œª f,
    show (track.refl f).congr_left g = track.refl (g ‚àò f),
    begin
      apply congr_arg quotient.mk,
      unfold homotopy_on.refl homotopy_on.congr_left,
      congr' 2,
      rw ‚Üêassoc, refl
    end,
  map_comp' := Œª f‚ÇÄ f‚ÇÅ f‚ÇÇ t‚ÇÄ t‚ÇÅ,
    show (t‚ÇÄ.trans t‚ÇÅ).congr_left g = (t‚ÇÄ.congr_left g).trans (t‚ÇÅ.congr_left g),
    begin
      induction t‚ÇÄ using quot.ind,
      induction t‚ÇÅ using quot.ind,
      apply congr_arg quotient.mk,
      congr', apply homotopy_on.ext,
      apply pushout_induced_comp
    end }

-- TODO: Precomposition is also a functor, & they are compatible,
-- interchange, etc.

end functoriality

-- We next relate tracks back to the original notion of "homotopies up
-- to homotopy", showing that for any particular relative cylinder
-- object c on a ‚Üí b, tracks from f‚ÇÄ : b ‚Üí x to f‚ÇÅ : b ‚Üí x are in
-- one-to-one correspondence with homotopy classes rel b ‚äî‚Çê b ‚Üí c of
-- homotopies from f‚ÇÄ to f‚ÇÅ defined on the given relative cylinder c,
-- provided that x is fibrant.

section track_homotopy_class
variables {c : relative_cylinder hj}
-- Use g‚ÇÄ g‚ÇÅ instead of f‚ÇÄ f‚ÇÅ, so that we can put the variables in the
-- correct order (c first).
variables (hx : fibrant x)
variables {g‚ÇÄ g‚ÇÅ : b ‚ü∂ x}

section correspondence

def homotopic_homotopies (h‚ÇÄ h‚ÇÅ : homotopy_on c g‚ÇÄ g‚ÇÅ) : Prop :=
homotopic_rel c.hii h‚ÇÄ.H h‚ÇÅ.H

variables (c g‚ÇÄ g‚ÇÅ)
instance homotopic_homotopies.setoid : setoid (homotopy_on c g‚ÇÄ g‚ÇÅ) :=
{ r := homotopic_homotopies,
  iseqv :=
    ‚ü®Œª h, homotopic_rel.refl _,
     Œª h‚ÇÄ h‚ÇÅ, homotopic_rel.symm,
     Œª h‚ÇÄ h‚ÇÅ h‚ÇÇ, homotopic_rel.trans‚ü© }

def homotopy_up_to_homotopy : Type v :=
quotient (homotopic_homotopies.setoid c g‚ÇÄ g‚ÇÅ)

variables {c g‚ÇÄ g‚ÇÅ}
-- One direction of the correspondence is easy.
def track_of_homotopy_on (h : homotopy_on c g‚ÇÄ g‚ÇÅ) : track hj g‚ÇÄ g‚ÇÅ := ‚ü¶‚ü®c, h‚ü©‚üß

variables {x c g‚ÇÄ g‚ÇÅ}
lemma eq_track_of_homotopic_rel (h‚ÇÄ h‚ÇÅ : homotopy_on c g‚ÇÄ g‚ÇÅ) :
  homotopic_homotopies h‚ÇÄ h‚ÇÅ ‚Üí track_of_homotopy_on h‚ÇÄ = track_of_homotopy_on h‚ÇÅ :=
assume ‚ü®c', ‚ü®‚ü®H, Hi‚ÇÄ, Hi‚ÇÅ‚ü©‚ü©‚ü©, quotient.sound $
  -- c' is a relative cylinder on b ‚äî‚Çê b ‚Üí c. We can also view its
  -- underlying object as a relative cylinder on the original map a ‚Üí b,
  -- and then H as a homotopy from g‚ÇÄ to g‚ÇÅ rel a ‚Üí b.
  let c'' : relative_cylinder hj :=
        ‚ü®c'.ob, c'.i‚ÇÄ ‚àò c.ii, c.p ‚àò c'.p,
         cof_comp c.hii c'.acof_i‚ÇÄ.1, weq_comp c'.hp c.hp, calc
           (c.p ‚àò c'.p) ‚àò (c'.i‚ÇÄ ‚àò c.ii)
             = c.p ‚àò (c'.p ‚àò c'.i‚ÇÄ) ‚àò c.ii  : by simp
         ... = c.p ‚àò c.ii                   : by rw c'.pi‚ÇÄ; simp
         ... = _                            : c.pii‚ü© in
  ‚ü®‚ü®c'',
   ‚ü®H,
    show H ‚àò (c'.i‚ÇÄ ‚àò c.ii ‚àò _) = _, by simp [Hi‚ÇÄ]; rw ‚Üêassoc; exact h‚ÇÄ.Hi‚ÇÄ,
    show H ‚àò (c'.i‚ÇÄ ‚àò c.ii ‚àò _) = _, by simp [Hi‚ÇÄ]; rw ‚Üêassoc; exact h‚ÇÄ.Hi‚ÇÅ‚ü©‚ü©,
   ‚ü®‚ü®c'.i‚ÇÄ, c'.acof_i‚ÇÄ.1, rfl, by rw ‚Üêassoc; simp [c'.pi‚ÇÄ]‚ü©, Hi‚ÇÄ‚ü©,
   ‚ü®‚ü®c'.i‚ÇÅ, c'.acof_i‚ÇÅ.1, c'.ij.symm, by rw ‚Üêassoc; simp [c'.pi‚ÇÅ]‚ü©, Hi‚ÇÅ‚ü©, ‚ü®‚ü©‚ü©

local attribute [elab_with_expected_type] quotient.lift
def track_of_homotopy_class : homotopy_up_to_homotopy c g‚ÇÄ g‚ÇÅ ‚Üí track hj g‚ÇÄ g‚ÇÅ :=
quotient.lift track_of_homotopy_on (Œª h‚ÇÄ h‚ÇÅ, eq_track_of_homotopic_rel h‚ÇÄ h‚ÇÅ)

-- Similar to `homotopic_iff`. We choose a common embedding of c and
-- the cylinder on which t is defined, use the hypothesis that x is
-- fibrant to extend the homotopy to this new cylinder, and then
-- restrict it to c.
private def surj (t : track hj g‚ÇÄ g‚ÇÅ) :
  ‚àÉ h : homotopy_up_to_homotopy c g‚ÇÄ g‚ÇÅ, track_of_homotopy_class h = t :=
quotient.induction_on t $ Œª ‚ü®c', ‚ü®H, Hi‚ÇÄ, Hi‚ÇÅ‚ü©‚ü©,
  let ‚ü®‚ü®c'', m‚ÇÄ, m‚ÇÅ‚ü©‚ü© := exists_common_embedding c c',
      ‚ü®H', hH'‚ü© := fibrant_iff_rlp.mp hx m‚ÇÅ.acof_k H in
  ‚ü®‚ü¶‚ü®H' ‚àò m‚ÇÄ.k,
     by rw [‚Üêassoc, m‚ÇÄ.hki‚ÇÄ, ‚Üêm‚ÇÅ.hki‚ÇÄ, assoc, hH', Hi‚ÇÄ],
     by rw [‚Üêassoc, m‚ÇÄ.hki‚ÇÅ, ‚Üêm‚ÇÅ.hki‚ÇÅ, assoc, hH', Hi‚ÇÅ]‚ü©‚üß,
   quotient.sound
     ‚ü®‚ü®c'',
      ‚ü®H',
       by rw [‚Üêm‚ÇÅ.hki‚ÇÄ, assoc, hH', Hi‚ÇÄ],
       by rw [‚Üêm‚ÇÅ.hki‚ÇÅ, assoc, hH', Hi‚ÇÅ]‚ü©‚ü©,
      ‚ü®m‚ÇÄ, rfl‚ü©, ‚ü®m‚ÇÅ, hH'‚ü©, ‚ü®‚ü©‚ü©‚ü©

set_option eqn_compiler.zeta true
private def inj (h‚ÇÄ h‚ÇÅ : homotopy_up_to_homotopy c g‚ÇÄ g‚ÇÅ) :
  track_of_homotopy_class h‚ÇÄ = track_of_homotopy_class h‚ÇÅ ‚Üí h‚ÇÄ = h‚ÇÅ :=
quotient.induction_on‚ÇÇ h‚ÇÄ h‚ÇÅ $ Œª h‚ÇÄ h‚ÇÅ e, quotient.sound $
  let ‚ü®t', m‚ÇÄ, m‚ÇÅ, ‚ü®‚ü©‚ü© := quotient.exact e,
      c' := chosen_cylinder c.hii,
      po :=
        pushout_by_cof c'.ii
          ((pushout_by_cof c.ii c.ii c.hii).is_pushout.induced
            m‚ÇÄ.m.k m‚ÇÅ.m.k (by rw [m‚ÇÄ.m.hkii, m‚ÇÅ.m.hkii])) c'.hii,
      p' := po.is_pushout.induced (c.p ‚àò c'.p) t'.c.p $ begin
         rw [‚Üêassoc, c'.pii],
         rw [pushout_induced_comp, pushout_induced_comp], congr' 1,
         { simp [m‚ÇÄ.m.hpk] }, { simp [m‚ÇÅ.m.hpk] }
      end,
      ‚ü®z, l, q, hl, hq, ql‚ü© := factorization p' in
  have is_acof (l ‚àò po.map‚ÇÅ), from
    ‚ü®cof_comp (pushout_is_cof po.is_pushout c'.hii) hl,
     weq_of_comp_weq_right hq (by convert t'.c.hp; simp [ql])‚ü©,
  let ‚ü®H', hH'‚ü© := fibrant_iff_rlp.mp hx this t'.h.H in
  begin
    rw assoc at hH',
    refine ‚ü®c', ‚ü®‚ü®H' ‚àò l ‚àò po.map‚ÇÄ, _, _‚ü©‚ü©‚ü©;
    { change _ ‚àò _ ‚àò _ ‚àò (_ ‚àò _) = _, rw assoc,
      conv { to_lhs, congr, skip, rw ‚Üêassoc },
      rw po.is_pushout.commutes,
      simp [hH'], rw ‚Üêassoc, simp [m‚ÇÄ.e, m‚ÇÅ.e] }
  end

variables (c)
-- FIXME: Why doesn't ‚âÉ work here??
noncomputable def homotopy_class_equiv_track :
  equiv (homotopy_up_to_homotopy c g‚ÇÄ g‚ÇÅ) (track hj g‚ÇÄ g‚ÇÅ) :=
equiv.of_bijective _ ‚ü®inj hx, surj hx‚ü©

section
variables (hj hx)
include hj c hx
def homotopy_class_groupoid := b ‚ü∂ x
end

noncomputable instance homotopy_class_groupoid.groupoid :
  groupoid (homotopy_class_groupoid hj c hx) :=
transported_groupoid
  (by apply_instance : groupoid (track_groupoid_rel hj x))
  (Œª g‚ÇÄ g‚ÇÅ, (homotopy_class_equiv_track c hx).symm)

-- This is definitionally equal to .to_category of the above,
-- but helps with defining homotopy_class_functor somehow.
private noncomputable def homotopy_class_groupoid.category :
  category (homotopy_class_groupoid hj c hx) :=
transported_category
  (by apply_instance : category (track_groupoid_rel hj x))
  (Œª g‚ÇÄ g‚ÇÅ, (homotopy_class_equiv_track c hx).symm)

section functoriality
variables {c} {y : C} (hy : fibrant y) (k : x ‚ü∂ y)
def homotopy_up_to_homotopy.congr_left {g‚ÇÄ g‚ÇÅ : b ‚ü∂ x}
  (h : homotopy_up_to_homotopy c g‚ÇÄ g‚ÇÅ) :
  homotopy_up_to_homotopy c (k ‚àò g‚ÇÄ) (k ‚àò g‚ÇÅ) :=
quotient.lift_on h
  (Œª h, ‚ü¶h.congr_left hj k‚üß)
  (Œª h h' H, quotient.sound (H.congr_left c.hii k))

noncomputable def homotopy_class_functor :
  homotopy_class_groupoid hj c hx ‚Üù homotopy_class_groupoid hj c hy :=
show @category_theory.functor
  _ (homotopy_class_groupoid.category c hx)
  _ (homotopy_class_groupoid.category c hy), from
transported_functor
  (Œª g‚ÇÄ g‚ÇÅ, (homotopy_class_equiv_track c hx).symm)
  (Œª g‚ÇÄ g‚ÇÅ, (homotopy_class_equiv_track c hy).symm)
  (track_groupoid_rel_functor k)

lemma homotopy_class_functor.obj {g : homotopy_class_groupoid hj c hx} :
  (homotopy_class_functor hx hy k).obj g = k ‚àò g :=
rfl

lemma homotopy_class_functor.hom {g‚ÇÄ g‚ÇÅ : homotopy_class_groupoid hj c hx}
  {h : g‚ÇÄ ‚ü∂ g‚ÇÅ} : homotopy_class_functor hx hy k &> h = h.congr_left k :=
quotient.induction_on h $ Œª h,
begin
  dsimp [homotopy_class_functor, transported_functor],
  rw ‚Üêequiv.eq_symm_apply,
  rw [equiv.symm_symm, equiv.symm_symm],
  refl
end

private lemma heq_of_homotopies_eq
  {g‚ÇÄ g‚ÇÄ' g‚ÇÅ g‚ÇÅ' : homotopy_class_groupoid hj c hx} (e‚ÇÄ : g‚ÇÄ = g‚ÇÄ') (e‚ÇÅ : g‚ÇÅ = g‚ÇÅ')
  (H : homotopy_on c g‚ÇÄ g‚ÇÅ) (H' : homotopy_on c g‚ÇÄ' g‚ÇÅ') (e : H.H = H'.H) :
  (‚ü¶H‚üß : g‚ÇÄ ‚ü∂ g‚ÇÅ) == (‚ü¶H'‚üß : g‚ÇÄ' ‚ü∂ g‚ÇÅ') :=
begin
  subst e‚ÇÄ, subst e‚ÇÅ,
  congr,
  cases H, cases H',
  congr,
  exact e
end

-- Next we show that homotopy_class_functor is functorial in "k".
lemma homotopy_class_functor.map_id :
  homotopy_class_functor hx hx (ùüô x) = functor.id (homotopy_class_groupoid hj c hx) :=
begin
  fapply functor.hext,
  { intro g, rw [homotopy_class_functor.obj], simp },
  { intros g‚ÇÄ g‚ÇÅ h, rw homotopy_class_functor.hom,
    induction h using quot.ind,
    apply heq_of_homotopies_eq; { simp [homotopy_on.congr_left] } }
end

lemma homotopy_class_functor.map_comp {z : C} (hz : fibrant z) (k' : y ‚ü∂ z) :
  (homotopy_class_functor hx hz (k' ‚àò k) : homotopy_class_groupoid hj c hx ‚Üù _) =
  (homotopy_class_functor hx hy k).comp (homotopy_class_functor hy hz k') :=
begin
  fapply functor.hext,
  { intro g, rw [homotopy_class_functor.obj],
    rw [‚Üêassoc], refl },
  { intros g‚ÇÄ g‚ÇÅ h,
    rw [functor.comp_map],
    repeat { rw homotopy_class_functor.hom },
    induction h using quot.ind,
    apply heq_of_homotopies_eq hz;
    { simp [homotopy_class_functor.obj, homotopy_on.congr_left] } }
end

end functoriality

end correspondence
end track_homotopy_class

end homotopy_theory.cofibrations
