import category_theory.pasting_pushouts
import homotopy_theory.formal.cylinder.definitions
import .cofibration_category

universes v u

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.cylinder (endpoint)
open homotopy_theory.weak_equivalences
open homotopy_theory.weak_equivalences.category_with_weak_equivalences
open precofibration_category cofibration_category

variables {C : Type u} [category.{v} C] [cofibration_category.{v} C]

variables {a b : C} {j : a ‚ü∂ b} (hj : is_cof j)

structure relative_cylinder :=
(ob : C)
(ii : (pushout_by_cof j j hj).ob ‚ü∂ ob)
(p : ob ‚ü∂ b)
(hii : is_cof ii)
(hp : is_weq p)
(pii : p ‚àò ii = (pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl)

-- Any cofibration admits a relative cylinder.
lemma exists_relative_cylinder : nonempty (relative_cylinder hj) :=
let ‚ü®c, ii, p, hii, hp, pii‚ü© :=
  factorization ((pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl) in
‚ü®‚ü®c, ii, p, hii, hp, pii‚ü©‚ü©

variables {hj}

def relative_cylinder.i‚ÇÄ (c : relative_cylinder hj) : b ‚ü∂ c.ob :=
c.ii ‚àò (pushout_by_cof j j hj).map‚ÇÄ

def relative_cylinder.i‚ÇÅ (c : relative_cylinder hj) : b ‚ü∂ c.ob :=
c.ii ‚àò (pushout_by_cof j j hj).map‚ÇÅ

lemma relative_cylinder.pi‚ÇÄ (c : relative_cylinder hj) : c.p ‚àò c.i‚ÇÄ = ùüô b :=
by unfold relative_cylinder.i‚ÇÄ; simp [c.pii]

lemma relative_cylinder.pi‚ÇÅ (c : relative_cylinder hj) : c.p ‚àò c.i‚ÇÅ = ùüô b :=
by unfold relative_cylinder.i‚ÇÅ; simp [c.pii]

lemma relative_cylinder.ij (c : relative_cylinder hj) : c.i‚ÇÄ ‚àò j = c.i‚ÇÅ ‚àò j :=
begin
  unfold relative_cylinder.i‚ÇÄ relative_cylinder.i‚ÇÅ,
  rw [‚Üêassoc, ‚Üêassoc, (pushout_by_cof j j hj).is_pushout.commutes]
end

lemma relative_cylinder.acof_i‚ÇÄ (c : relative_cylinder hj) : is_acof c.i‚ÇÄ :=
‚ü®cof_comp (pushout_is_cof (pushout_by_cof j j hj).is_pushout.transpose hj) c.hii,
 weq_of_comp_weq_right c.hp (by convert (weq_id _); exact c.pi‚ÇÄ)‚ü©

lemma relative_cylinder.acof_i‚ÇÅ (c : relative_cylinder hj) : is_acof c.i‚ÇÅ :=
‚ü®cof_comp (pushout_is_cof (pushout_by_cof j j hj).is_pushout hj) c.hii,
 weq_of_comp_weq_right c.hp (by convert (weq_id _); exact c.pi‚ÇÅ)‚ü©

-- If j : a ‚Üí b is an *acyclic* cofibration, then so is c.ii.
lemma relative_cylinder.acof_ii (c : relative_cylinder hj) (hj' : is_weq j) : is_acof c.ii :=
have is_acof (pushout_by_cof j j hj).map‚ÇÅ, from
  pushout_is_acof (pushout_by_cof j j hj).is_pushout ‚ü®hj, hj'‚ü©,
have is_weq ((pushout_by_cof j j hj).is_pushout.induced (ùüô b) (ùüô b) rfl), from
  weq_of_comp_weq_left this.2 (by convert weq_id b using 1; simp),
‚ü®c.hii, weq_of_comp_weq_right c.hp (by convert this; simp [c.pii])‚ü©

structure cylinder_embedding (c c' : relative_cylinder hj) :=
(k : c.ob ‚ü∂ c'.ob)
(hk : is_cof k)
(hkii : k ‚àò c.ii = c'.ii)
(hpk : c'.p ‚àò k = c.p)

lemma cylinder_embedding.hki‚ÇÄ {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  m.k ‚àò c.i‚ÇÄ = c'.i‚ÇÄ :=
by unfold relative_cylinder.i‚ÇÄ; simp [m.hkii]

lemma cylinder_embedding.hki‚ÇÅ {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  m.k ‚àò c.i‚ÇÅ = c'.i‚ÇÅ :=
by unfold relative_cylinder.i‚ÇÅ; simp [m.hkii]

lemma cylinder_embedding.acof_k {c c' : relative_cylinder hj} (m : cylinder_embedding c c') :
  is_acof m.k :=
‚ü®m.hk, weq_of_comp_weq_right c'.hp (by convert c.hp; rw m.hpk)‚ü©

def cylinder_embedding.refl (c : relative_cylinder hj) : cylinder_embedding c c :=
‚ü®ùüô c.ob, cof_id _, by simp, by simp‚ü©

def cylinder_embedding.trans {c‚ÇÄ c‚ÇÅ c‚ÇÇ : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c‚ÇÄ c‚ÇÅ) (m‚ÇÅ : cylinder_embedding c‚ÇÅ c‚ÇÇ) : cylinder_embedding c‚ÇÄ c‚ÇÇ :=
‚ü®m‚ÇÅ.k ‚àò m‚ÇÄ.k,
 cof_comp m‚ÇÄ.hk m‚ÇÅ.hk,
 by rw [‚Üêassoc, m‚ÇÄ.hkii, m‚ÇÅ.hkii],
 by rw [assoc, m‚ÇÅ.hpk, m‚ÇÄ.hpk]‚ü©

-- Any two relative cylinders on the same cofibration can be embedded
-- in a third.

structure common_embedding (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) :=
(c' : relative_cylinder hj)
(m‚ÇÄ : cylinder_embedding c‚ÇÄ c')
(m‚ÇÅ : cylinder_embedding c‚ÇÅ c')

-- Factor out the second part of the construction of a common
-- embedding, since we will need to apply it to a particular form of
-- factorization later, when verifying the identity and inverse laws
-- for track composition.
def common_embedding_of_factorization (c‚ÇÄ c‚ÇÅ : relative_cylinder hj)
  (po : pushout c‚ÇÄ.ii c‚ÇÅ.ii) (c'_ob : C) (l : po.ob ‚ü∂ c'_ob) (q : c'_ob ‚ü∂ b)
  (hl : is_cof l) (hq : is_weq q)
  (ql : q ‚àò l = po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by simp [c‚ÇÄ.pii, c‚ÇÅ.pii])) :
  common_embedding c‚ÇÄ c‚ÇÅ :=
let c' : relative_cylinder hj :=
  ‚ü®c'_ob, l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii, q,
   cof_comp c‚ÇÅ.hii (cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl),
   hq, by simp [ql, c‚ÇÅ.pii]‚ü© in
‚ü®c',
 ‚ü®l ‚àò po.map‚ÇÄ,
  cof_comp (pushout_is_cof po.is_pushout.transpose c‚ÇÅ.hii) hl,
  by rw [‚Üêassoc, po.is_pushout.commutes, assoc],
  by simp [ql]‚ü©,
 ‚ü®l ‚àò po.map‚ÇÅ,
  cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl,
  rfl,
  by simp [ql]‚ü©‚ü©

lemma exists_common_embedding (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) :
  nonempty (common_embedding c‚ÇÄ c‚ÇÅ) :=
let po := pushout_by_cof c‚ÇÄ.ii c‚ÇÅ.ii c‚ÇÄ.hii,
    pp := po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by rw [c‚ÇÄ.pii, c‚ÇÅ.pii]),
    ‚ü®c'_ob, l, q, hl, hq, ql‚ü© := factorization pp in
‚ü®common_embedding_of_factorization c‚ÇÄ c‚ÇÅ po c'_ob l q hl hq ql‚ü©

def cylinder_embedding.pushout {c c‚ÇÄ c‚ÇÅ : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c c‚ÇÄ) (m‚ÇÅ : cylinder_embedding c c‚ÇÅ) : relative_cylinder hj :=
‚ü®(pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).ob,
 (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).map‚ÇÅ ‚àò c‚ÇÅ.ii,
 (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p
   (by rw [m‚ÇÄ.hpk, ‚Üêm‚ÇÅ.hpk]),
 cof_comp c‚ÇÅ.hii (pushout_is_cof (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout m‚ÇÄ.hk),
 weq_of_comp_weq_left
   (pushout_is_acof (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout m‚ÇÄ.acof_k).2
   (by convert c‚ÇÅ.hp; simp),
 by simp [c‚ÇÅ.pii]‚ü©

def cylinder_embedding.pushout.map‚ÇÄ {c c‚ÇÄ c‚ÇÅ : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c c‚ÇÄ) (m‚ÇÅ : cylinder_embedding c c‚ÇÅ) :
  cylinder_embedding c‚ÇÄ (cylinder_embedding.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®(pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).map‚ÇÄ,
 pushout_is_cof (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout.transpose m‚ÇÅ.hk,
 show
   (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).map‚ÇÄ ‚àò c‚ÇÄ.ii =
   (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).map‚ÇÅ ‚àò c‚ÇÅ.ii,
 begin
   rw [‚Üêm‚ÇÄ.hkii, ‚Üêm‚ÇÅ.hkii],
   simp [(pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout.commutes]
 end,
 show Is_pushout.induced _ _ _ _ ‚àò _ = _, by simp‚ü©

def cylinder_embedding.pushout.map‚ÇÅ {c c‚ÇÄ c‚ÇÅ : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c c‚ÇÄ) (m‚ÇÅ : cylinder_embedding c c‚ÇÅ) :
  cylinder_embedding c‚ÇÅ (cylinder_embedding.pushout m‚ÇÄ m‚ÇÅ) :=
‚ü®(pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).map‚ÇÅ,
 pushout_is_cof (pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout m‚ÇÄ.hk,
 rfl,
 show Is_pushout.induced _ _ _ _ ‚àò _ = _, by simp‚ü©

def cylinder_embedding.pushout.is_pushout {c c‚ÇÄ c‚ÇÅ : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c c‚ÇÄ) (m‚ÇÅ : cylinder_embedding c c‚ÇÅ) :
  Is_pushout m‚ÇÄ.k m‚ÇÅ.k
    (cylinder_embedding.pushout.map‚ÇÄ m‚ÇÄ m‚ÇÅ).k
    (cylinder_embedding.pushout.map‚ÇÅ m‚ÇÄ m‚ÇÅ).k :=
(pushout_by_cof m‚ÇÄ.k m‚ÇÅ.k m‚ÇÄ.hk).is_pushout

def relative_cylinder.reverse (c : relative_cylinder hj) : relative_cylinder hj :=
‚ü®c.ob,
 c.ii ‚àò (pushout_by_cof j j hj).is_pushout.swap,
 c.p,
 cof_comp (cof_iso (pushout_by_cof j j hj).is_pushout.swap_iso) c.hii,
 c.hp,
 by simp [c.pii]‚ü©

@[simp] lemma relative_cylinder.reverse_i‚ÇÄ {c : relative_cylinder hj} :
  c.reverse.i‚ÇÄ = c.i‚ÇÅ :=
show c.ii ‚àò (pushout_by_cof j j hj).is_pushout.induced _ _ _ ‚àò (pushout_by_cof j j hj).map‚ÇÄ = _,
by rw [‚Üêassoc]; simp; refl

@[simp] lemma relative_cylinder.reverse_i‚ÇÅ {c : relative_cylinder hj} :
  c.reverse.i‚ÇÅ = c.i‚ÇÄ :=
show c.ii ‚àò (pushout_by_cof j j hj).is_pushout.induced _ _ _ ‚àò (pushout_by_cof j j hj).map‚ÇÅ = _,
by rw [‚Üêassoc]; simp; refl

def cylinder_embedding.reverse {c c' : relative_cylinder hj}
  (m : cylinder_embedding c c') : cylinder_embedding c.reverse c'.reverse :=
‚ü®m.k, m.hk, show m.k ‚àò (c.ii ‚àò _) = c'.ii ‚àò _, by simp [m.hkii], m.hpk‚ü©

-- TODO: Should really have this `pushout_by_cof` exposed somewhere
def relative_cylinder.glue (c‚ÇÄ c‚ÇÅ : relative_cylinder hj) : relative_cylinder.{v} hj :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
‚ü®po.ob,
 (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) $
   by rw [‚Üêassoc, ‚Üêassoc, c‚ÇÄ.ij, ‚Üêc‚ÇÅ.ij]; simp [po.is_pushout.commutes],
 po.is_pushout.induced c‚ÇÄ.p c‚ÇÅ.p (by rw [c‚ÇÄ.pi‚ÇÅ, c‚ÇÅ.pi‚ÇÄ]),
 begin
   let po‚ÇÄ := pushout_by_cof c‚ÇÄ.i‚ÇÄ (pushout_by_cof j j hj).map‚ÇÄ c‚ÇÄ.acof_i‚ÇÄ.1,
   let po‚ÇÄ' :=
     (Is_pushout_of_Is_pushout_of_Is_pushout
       (pushout_by_cof j j hj).is_pushout.transpose po‚ÇÄ.is_pushout.transpose).transpose,
   let f :=
     (pushout_by_cof j j hj).is_pushout.induced
       (po‚ÇÄ.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÅ) (po‚ÇÄ.map‚ÇÅ ‚àò (pushout_by_cof j j hj).map‚ÇÅ)
       (by rw [‚Üêassoc, ‚Üêassoc, ‚Üêc‚ÇÄ.ij,
               ‚Üê(pushout_by_cof j j hj).is_pushout.commutes,
               assoc, assoc, po‚ÇÄ.is_pushout.commutes]),
   let po‚ÇÅ : Is_pushout c‚ÇÄ.i‚ÇÅ (pushout_by_cof j j hj).map‚ÇÄ po‚ÇÄ.map‚ÇÄ f :=
     Is_pushout_of_Is_pushout_of_Is_pushout_vert'
       (pushout_by_cof j j hj).is_pushout
       (begin convert po‚ÇÄ' using 1, { exact c‚ÇÄ.ij.symm }, { simp } end) (by simp),
   let g := po‚ÇÅ.induced po.map‚ÇÄ (po.map‚ÇÅ ‚àò c‚ÇÅ.ii)
     (by rw ‚Üêassoc; exact po.is_pushout.commutes),
   let po‚ÇÇ : Is_pushout f c‚ÇÅ.ii g po.map‚ÇÅ :=
     Is_pushout_of_Is_pushout_of_Is_pushout' po‚ÇÅ (by convert po.is_pushout; simp) (by simp),
   have : ‚àÄ p,
     (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) p =
     g ‚àò po‚ÇÄ.map‚ÇÅ :=
   begin
     intro p, apply (pushout_by_cof j j hj).is_pushout.uniqueness,
     { rw [‚Üêassoc, ‚Üêpo‚ÇÄ.is_pushout.commutes], simp },
     { rw ‚Üêassoc,
       have :
         po‚ÇÄ.map‚ÇÅ ‚àò (pushout_by_cof.{v} j j hj).map‚ÇÅ =
         f ‚àò (pushout_by_cof.{v} j j hj).map‚ÇÅ, by simp,
       rw this,
       rw [assoc, po‚ÇÇ.commutes, ‚Üêassoc],
       change _ = po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ, simp }
   end,
   rw this,
   exact cof_comp
     (pushout_is_cof po‚ÇÄ.is_pushout c‚ÇÄ.acof_i‚ÇÄ.1)
     (pushout_is_cof po‚ÇÇ.transpose c‚ÇÅ.hii)
 end,
 weq_of_comp_weq_left
   (pushout_is_acof po.is_pushout c‚ÇÄ.acof_i‚ÇÅ).2
   (by simpa using c‚ÇÅ.hp),
 begin
   apply (pushout_by_cof j j hj).is_pushout.uniqueness;
   { rw ‚Üêassoc, simp, rw [c‚ÇÄ.pi‚ÇÄ] <|> rw [c‚ÇÅ.pi‚ÇÅ] }
 end‚ü©

@[simp] lemma relative_cylinder.glue_i‚ÇÄ {c‚ÇÄ c‚ÇÅ : relative_cylinder hj} :
  (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÄ = (pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
show
  (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) _ ‚àò
    (pushout_by_cof j j hj).map‚ÇÄ = _, by simp

@[simp] lemma relative_cylinder.glue_i‚ÇÅ {c‚ÇÄ c‚ÇÅ : relative_cylinder hj} :
  (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÅ = (pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ :=
let po := pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1 in
show
  (pushout_by_cof j j hj).is_pushout.induced (po.map‚ÇÄ ‚àò c‚ÇÄ.i‚ÇÄ) (po.map‚ÇÅ ‚àò c‚ÇÅ.i‚ÇÅ) _ ‚àò
    (pushout_by_cof j j hj).map‚ÇÅ = _, by simp

def cylinder_embedding.glue {c‚ÇÄ c‚ÇÅ c‚ÇÄ' c‚ÇÅ' : relative_cylinder hj}
  (m‚ÇÄ : cylinder_embedding c‚ÇÄ c‚ÇÄ') (m‚ÇÅ : cylinder_embedding c‚ÇÅ c‚ÇÅ') :
  cylinder_embedding (c‚ÇÄ.glue c‚ÇÅ) (c‚ÇÄ'.glue c‚ÇÅ') :=
‚ü®(pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).is_pushout.induced
   ((pushout_by_cof c‚ÇÄ'.i‚ÇÅ c‚ÇÅ'.i‚ÇÄ c‚ÇÄ'.acof_i‚ÇÅ.1).map‚ÇÄ ‚àò m‚ÇÄ.k)
   ((pushout_by_cof c‚ÇÄ'.i‚ÇÅ c‚ÇÅ'.i‚ÇÄ c‚ÇÄ'.acof_i‚ÇÅ.1).map‚ÇÅ ‚àò m‚ÇÅ.k)
   (by rw [‚Üêassoc, ‚Üêassoc, m‚ÇÄ.hki‚ÇÅ, m‚ÇÅ.hki‚ÇÄ];
       exact (pushout_by_cof c‚ÇÄ'.i‚ÇÅ c‚ÇÅ'.i‚ÇÄ c‚ÇÄ'.acof_i‚ÇÅ.1).is_pushout.commutes),
 begin
   apply cof_pushout m‚ÇÄ.hk m‚ÇÅ.hk,
   convert (pushout_by_cof c‚ÇÄ'.i‚ÇÅ c‚ÇÅ'.i‚ÇÄ c‚ÇÄ'.acof_i‚ÇÅ.1).is_pushout using 1,
   exact m‚ÇÄ.hki‚ÇÅ, exact m‚ÇÅ.hki‚ÇÄ
 end,
 begin
   apply (pushout_by_cof j j hj).is_pushout.uniqueness; rw ‚Üêassoc,
   { change _ ‚àò (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÄ = (c‚ÇÄ'.glue c‚ÇÅ').i‚ÇÄ, simp [m‚ÇÄ.hki‚ÇÄ.symm] },
   { change _ ‚àò (c‚ÇÄ.glue c‚ÇÅ).i‚ÇÅ = (c‚ÇÄ'.glue c‚ÇÅ').i‚ÇÅ, simp [m‚ÇÅ.hki‚ÇÅ.symm] }
 end,
 begin
   apply (pushout_by_cof c‚ÇÄ.i‚ÇÅ c‚ÇÅ.i‚ÇÄ c‚ÇÄ.acof_i‚ÇÅ.1).is_pushout.uniqueness; rw ‚Üêassoc;
   change Is_pushout.induced _ _ _ _ ‚àò _ = Is_pushout.induced _ _ _ _ ‚àò _;
   simp [m‚ÇÄ.hpk, m‚ÇÅ.hpk]
 end‚ü©

section pair_map
variables (hj)
variables {a' b' : C} {j' : a' ‚ü∂ b'} (hj' : is_cof j')

include hj hj'
structure pair_map :=
(g : a ‚ü∂ a')
(h : b ‚ü∂ b')
(commutes : h ‚àò j = j' ‚àò g)
omit hj hj'

variables {hj hj'}
def endpoints_map (h : pair_map hj hj') :
  (pushout_by_cof j j hj).ob ‚ü∂ (pushout_by_cof j' j' hj').ob :=
pushout_of_maps
  (pushout_by_cof j j hj).is_pushout
  (pushout_by_cof j' j' hj').is_pushout
  h.g h.h h.h h.commutes h.commutes

-- Like `cylinder_embedding`, but we do not require that the map
-- between cylinders be a cofibration (since b ‚Üí b' might not be one).
structure cylinder_map_over (h : pair_map hj hj')
  (c : relative_cylinder hj) (c' : relative_cylinder hj') :=
(k : c.ob ‚ü∂ c'.ob)
(hkii : k ‚àò c.ii = c'.ii ‚àò endpoints_map h)
(hpk : c'.p ‚àò k = h.h ‚àò c.p)

lemma cylinder_map_over.hki‚ÇÄ {h : pair_map hj hj'}
  {c : relative_cylinder hj} {c' : relative_cylinder hj'} (m : cylinder_map_over h c c') :
  m.k ‚àò c.i‚ÇÄ = c'.i‚ÇÄ ‚àò h.h :=
begin
  unfold relative_cylinder.i‚ÇÄ,
  rw [assoc, m.hkii],
  unfold endpoints_map pushout_of_maps,
  rw [‚Üêassoc], simp
end

lemma cylinder_map_over.hki‚ÇÅ {h : pair_map hj hj'}
  {c : relative_cylinder hj} {c' : relative_cylinder hj'} (m : cylinder_map_over h c c') :
  m.k ‚àò c.i‚ÇÅ = c'.i‚ÇÅ ‚àò h.h :=
begin
  unfold relative_cylinder.i‚ÇÅ,
  rw [assoc, m.hkii],
  unfold endpoints_map pushout_of_maps,
  rw [‚Üêassoc], simp
end

lemma exists_of_pair_map (h : pair_map hj hj')
  (c‚ÇÄ : relative_cylinder hj) (c‚ÇÅ : relative_cylinder hj') :
  ‚àÉ c' (m‚ÇÄ : cylinder_map_over h c‚ÇÄ c') (m‚ÇÅ : cylinder_embedding c‚ÇÅ c'), true :=
let po := pushout_by_cof c‚ÇÄ.ii (c‚ÇÅ.ii ‚àò endpoints_map h) c‚ÇÄ.hii,
    pp := po.is_pushout.induced (h.h ‚àò c‚ÇÄ.p) c‚ÇÅ.p $ begin
      rw [‚Üêassoc, c‚ÇÄ.pii, assoc, c‚ÇÅ.pii],
      unfold endpoints_map, rw [induced_pushout_of_maps, pushout_induced_comp],
      simp
    end,
    ‚ü®c'_ob, l, q, hl, hq, ql‚ü© := factorization pp in
let c' : relative_cylinder hj' :=
  ‚ü®c'_ob, l ‚àò po.map‚ÇÅ ‚àò c‚ÇÅ.ii, q,
   cof_comp c‚ÇÅ.hii (cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl),
   hq, by simp [ql, c‚ÇÅ.pii]‚ü© in
‚ü®c',
 ‚ü®l ‚àò po.map‚ÇÄ,
  by rw [‚Üêassoc, po.is_pushout.commutes]; simp,
  by simp [ql]‚ü©,
 ‚ü®l ‚àò po.map‚ÇÅ,
  cof_comp (pushout_is_cof po.is_pushout c‚ÇÄ.hii) hl,
  rfl,
  by simp [ql]‚ü©,
 trivial‚ü©


end pair_map

end homotopy_theory.cofibrations
