import .precofibration_category

universes v u

namespace homotopy_theory.cofibrations
open category_theory category_theory.category
open precofibration_category

variables {C : Type u} [category.{v} C] [precofibration_category.{v} C]

-- These are the cofibrations in the arrow category of C with the "projective" structure.
structure cof_square {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : C} (a : a‚ÇÅ ‚ü∂ a‚ÇÇ) (b : b‚ÇÅ ‚ü∂ b‚ÇÇ) : Type (max u v) :=
(f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ)
(f‚ÇÇ : a‚ÇÇ ‚ü∂ b‚ÇÇ)
(hs : f‚ÇÅ ‚â´ b = a ‚â´ f‚ÇÇ)
(hf‚ÇÅ : is_cof f‚ÇÅ)
(hf‚ÇÇ : is_cof ((pushout_by_cof f‚ÇÅ a hf‚ÇÅ).is_pushout.induced b f‚ÇÇ hs))

def cof_square.id {a‚ÇÅ a‚ÇÇ : C} (a : a‚ÇÅ ‚ü∂ a‚ÇÇ) : cof_square a a :=
‚ü®ùüô a‚ÇÅ, ùüô a‚ÇÇ, by simp, cof_id _,
/-
  a‚ÇÅ = a‚ÇÅ
  ‚Üì    ‚Üì
  a‚ÇÇ = a‚ÇÇ
-/
 begin
   let := pushout.unique (pushout_by_cof (ùüô a‚ÇÅ) a (cof_id _)).is_pushout
     (Is_pushout.refl a).transpose,
   exact cof_iso this
 end‚ü©

def cof_square.comp {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : C} {a : a‚ÇÅ ‚ü∂ a‚ÇÇ} {b : b‚ÇÅ ‚ü∂ b‚ÇÇ} {c : c‚ÇÅ ‚ü∂ c‚ÇÇ}
  (f : cof_square a b) (g : cof_square b c) : cof_square a c :=
‚ü®f.f‚ÇÅ ‚â´ g.f‚ÇÅ,
 f.f‚ÇÇ ‚â´ g.f‚ÇÇ,
 by rw [assoc, g.hs, ‚Üêassoc, f.hs, assoc],
 cof_comp f.hf‚ÇÅ g.hf‚ÇÅ,
 begin
/-
  a‚ÇÅ ‚Üí b‚ÇÅ ‚Üí c‚ÇÅ   All these pushouts are "transposed" from the usual layout,
  ‚Üì  1 ‚Üì  2 ‚Üì    that is, the first map is horizontal and the second vertical.
  a‚ÇÇ ‚Üí ‚¨ù  ‚Üí ‚¨ù
       ‚Üì  3 ‚Üì
       b‚ÇÇ ‚Üí ‚¨ù
            ‚Üì
            c‚ÇÇ
-/
   let po‚ÇÅ := pushout_by_cof f.f‚ÇÅ a f.hf‚ÇÅ,
   let po‚ÇÅ‚ÇÇ := pushout_by_cof (f.f‚ÇÅ ‚â´ g.f‚ÇÅ) a (cof_comp f.hf‚ÇÅ g.hf‚ÇÅ),
   let k :=
     pushout_of_maps po‚ÇÅ.is_pushout po‚ÇÅ‚ÇÇ.is_pushout (ùüô a‚ÇÅ) g.f‚ÇÅ (ùüô a‚ÇÇ) (by simp) (by simp),
   have po‚ÇÇ : Is_pushout g.f‚ÇÅ po‚ÇÅ.map‚ÇÄ po‚ÇÅ‚ÇÇ.map‚ÇÄ k :=
     Is_pushout_of_Is_pushout_of_Is_pushout_vert' po‚ÇÅ.is_pushout
       (by convert po‚ÇÅ‚ÇÇ.is_pushout; simp [k, pushout_of_maps])
       (by simp [k, pushout_of_maps]),
   let fc := _,
   have : is_cof fc := f.hf‚ÇÇ,
   let po‚ÇÇ‚ÇÉ := pushout_by_cof g.f‚ÇÅ b g.hf‚ÇÅ,
   let l :=
     pushout_of_maps po‚ÇÅ‚ÇÇ.is_pushout po‚ÇÇ‚ÇÉ.is_pushout f.f‚ÇÅ (ùüô c‚ÇÅ) f.f‚ÇÇ (by simp) f.hs.symm,
   have po‚ÇÉ : Is_pushout k fc l po‚ÇÇ‚ÇÉ.map‚ÇÅ :=
     Is_pushout_of_Is_pushout_of_Is_pushout' po‚ÇÇ
       (by convert po‚ÇÇ‚ÇÉ.is_pushout; simp [l, pushout_of_maps])
       begin
         apply po‚ÇÅ.is_pushout.uniqueness;
         dsimp [k, fc, pushout_of_maps];
         conv { to_lhs, rw ‚Üêassoc };
         conv { to_rhs, rw ‚Üêassoc };
         simp [l, pushout_of_maps, po‚ÇÇ‚ÇÉ.is_pushout.commutes]
       end,
   let gc := _,
   have : is_cof gc := g.hf‚ÇÇ,
   convert cof_comp (pushout_is_cof po‚ÇÉ.transpose f.hf‚ÇÇ) g.hf‚ÇÇ,
   simp [l, induced_pushout_of_maps]
 end‚ü©

section is_cof_square

/- This "flatter" representation is helpful when trying to prove that a square's
  corner map is a cofibration by expressing it as (non-definitionally equal to)
  a composition of two such squares. -/

variables {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : C} (a : a‚ÇÅ ‚ü∂ a‚ÇÇ) (b : b‚ÇÅ ‚ü∂ b‚ÇÇ) {c : c‚ÇÅ ‚ü∂ c‚ÇÇ}
variables (f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ) (f‚ÇÇ : a‚ÇÇ ‚ü∂ b‚ÇÇ) {g‚ÇÅ : b‚ÇÅ ‚ü∂ c‚ÇÅ} {g‚ÇÇ : b‚ÇÇ ‚ü∂ c‚ÇÇ}
variables {h‚ÇÅ : a‚ÇÅ ‚ü∂ c‚ÇÅ} {h‚ÇÇ : a‚ÇÇ ‚ü∂ c‚ÇÇ}

def is_cof_square : Prop :=
‚àÉ s : cof_square a b, s.f‚ÇÅ = f‚ÇÅ ‚àß s.f‚ÇÇ = f‚ÇÇ

variables {a b f‚ÇÅ f‚ÇÇ}

lemma is_cof_square.corner_cof (H : is_cof_square a b f‚ÇÅ f‚ÇÇ) :
  ‚àÉ (hf‚ÇÅ : is_cof f‚ÇÅ) (hs : f‚ÇÅ ‚â´ b = a ‚â´ f‚ÇÇ),
  is_cof ((pushout_by_cof f‚ÇÅ a hf‚ÇÅ).is_pushout.induced b f‚ÇÇ hs) :=
begin
  rcases H with ‚ü®c, hc‚ÇÅ, hc‚ÇÇ‚ü©,
  subst f‚ÇÅ,
  subst f‚ÇÇ,
  exact ‚ü®c.hf‚ÇÅ, c.hs, c.hf‚ÇÇ‚ü©
end

lemma is_cof_square_comp (Hf : is_cof_square a b f‚ÇÅ f‚ÇÇ) (Hg : is_cof_square b c g‚ÇÅ g‚ÇÇ)
  (Hh‚ÇÅ : h‚ÇÅ = f‚ÇÅ ‚â´ g‚ÇÅ) (Hh‚ÇÇ : h‚ÇÇ = f‚ÇÇ ‚â´ g‚ÇÇ) : is_cof_square a c h‚ÇÅ h‚ÇÇ :=
begin
  rcases Hf with ‚ü®cf, hcf‚ÇÅ, hcf‚ÇÇ‚ü©,
  rcases Hg with ‚ü®cg, hcg‚ÇÅ, hcg‚ÇÇ‚ü©,
  subst f‚ÇÅ, subst f‚ÇÇ, subst g‚ÇÅ, subst g‚ÇÇ, subst h‚ÇÅ, subst h‚ÇÇ,
  exact ‚ü®cf.comp cg, rfl, rfl‚ü©
end

end is_cof_square

end homotopy_theory.cofibrations
