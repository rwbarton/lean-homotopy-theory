import .arrow
import .cofibration_category
import tactic.slice

/- Brown factorization, aka "Ken Brown's lemma", and a relative version.
   Following RƒÉdulescu-Banu, Cofibrations in Homotopy Theory, section 1.3. -/
   
universes v u

namespace homotopy_theory.cofibrations
open category_theory
open category_theory.category
open precofibration_category
open cofibration_category
open homotopy_theory.weak_equivalences

variables {C : Type u} [category.{v} C] [cofibration_category.{v} C]
  [has_initial_object.{v} C]

structure brown_factorization {a b : C} (f : a ‚ü∂ b) : Type (max u v) :=
-- ab represents a coproduct of a and b, used to formulate the condition on f' + s
(ab : pushout (! a) (! b))
(b' : C)
(f' : a ‚ü∂ b') (r : b' ‚ü∂ b) (s : b ‚ü∂ b')
(hf' : is_cof f')
(hf's : is_cof (ab.is_pushout.induced f' s (initial.uniqueness _ _)))
(hs : is_acof s)
(hf'r : f' ‚â´ r = f)
(hsr : s ‚â´ r = ùüô b)

lemma brown_factorization.hr {a b : C} {f : a ‚ü∂ b} (c : brown_factorization f) :
  is_weq c.r :=
begin
  convert category_with_weak_equivalences.weq_of_comp_weq_left c.hs.2 _,
  rw c.hsr,
  apply weq_id
end

lemma brown_factorization.weq_f' {a b : C} {f : a ‚ü∂ b} (c : brown_factorization f) (hf : is_weq f) :
  is_weq c.f' :=
begin
  convert category_with_weak_equivalences.weq_of_comp_weq_right c.hr _,
  rw c.hf'r,
  exact hf
end

--- Any map between cofibrant objects admits a Brown factorization (R-B, Lemma 1.3.1).
lemma exists_brown_factorization {a b : C} (ha : cofibrant a) (hb : cofibrant b) (f : a ‚ü∂ b) :
  nonempty (brown_factorization f) :=
let ab := pushout_by_cof (! a) (! b) ha,
    ‚ü®b', j, g, hj, hg, hf‚ü© :=
      factorization (ab.is_pushout.induced f (ùüô b) (initial.uniqueness _ _)) in
‚ü®‚ü®ab, b', ab.map‚ÇÄ ‚â´ j, g, ab.map‚ÇÅ ‚â´ j,
  cof_comp (pushout_is_cof ab.is_pushout.transpose hb) hj,
  by convert hj; apply ab.is_pushout.uniqueness; simp,
  begin
    split,
    { refine cof_comp (pushout_is_cof ab.is_pushout ha) hj },
    { convert category_with_weak_equivalences.weq_of_comp_weq_right hg _,
      rw [assoc, hf], simpa using weq_id _ }
  end,
  by rw [assoc, hf]; simp,
  by rw [assoc, hf]; simp‚ü©‚ü©

--- R-B, Lemma 1.3.3
lemma relative_factorization {a‚ÇÅ a‚ÇÅ' b‚ÇÅ a‚ÇÇ b‚ÇÇ : C}
  (ha‚ÇÅ : cofibrant a‚ÇÅ) (ha‚ÇÇ : cofibrant a‚ÇÇ)
  (f‚ÇÅ' : a‚ÇÅ ‚ü∂ a‚ÇÅ') (r‚ÇÅ : a‚ÇÅ' ‚ü∂ b‚ÇÅ) (hf‚ÇÅ' : is_cof f‚ÇÅ') (hr : is_weq r‚ÇÅ)
  (f‚ÇÇ : a‚ÇÇ ‚ü∂ b‚ÇÇ) (a : a‚ÇÅ ‚ü∂ a‚ÇÇ) (b : b‚ÇÅ ‚ü∂ b‚ÇÇ) (s : (f‚ÇÅ' ‚â´ r‚ÇÅ) ‚â´ b = a ‚â´ f‚ÇÇ) :
  ‚àÉ a‚ÇÇ' (a' : a‚ÇÅ' ‚ü∂ a‚ÇÇ') (f‚ÇÇ' : a‚ÇÇ ‚ü∂ a‚ÇÇ') (r‚ÇÇ : a‚ÇÇ' ‚ü∂ b‚ÇÇ)
  (hf' : f‚ÇÅ' ‚â´ a' = a ‚â´ f‚ÇÇ'), r‚ÇÅ ‚â´ b = a' ‚â´ r‚ÇÇ ‚àß f‚ÇÇ' ‚â´ r‚ÇÇ = f‚ÇÇ ‚àß is_cof f‚ÇÇ' ‚àß is_weq r‚ÇÇ ‚àß
  is_cof ((pushout_by_cof f‚ÇÅ' a hf‚ÇÅ').is_pushout.induced a' f‚ÇÇ' hf') :=
let po := pushout_by_cof f‚ÇÅ' a hf‚ÇÅ',
    g := po.is_pushout.induced (r‚ÇÅ ‚â´ b) f‚ÇÇ (by rw [‚Üês, assoc]),
    ‚ü®a‚ÇÇ', s, r‚ÇÇ, hs, hr‚ÇÇ, hg‚ü© := factorization g in
‚ü®a‚ÇÇ', po.map‚ÇÄ ‚â´ s, po.map‚ÇÅ ‚â´ s, r‚ÇÇ,
 by rw [‚Üêassoc, ‚Üêassoc, po.is_pushout.commutes],
 by rw [assoc, hg]; simp,
 by simp [hg],
 cof_comp (pushout_is_cof po.is_pushout hf‚ÇÅ') hs,
 hr‚ÇÇ,
 by convert hs; apply po.is_pushout.uniqueness; simp‚ü©

/-- R-B, Lemma 1.3.4. The statement there is missing hypotheses on the maps a and b,
  needed for the last two conclusions. -/
lemma exists_relative_brown_factorization {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : C}
  (ha‚ÇÅ : cofibrant a‚ÇÅ) (hb‚ÇÅ : cofibrant b‚ÇÅ) (ha‚ÇÇ : cofibrant a‚ÇÇ) (hb‚ÇÇ : cofibrant b‚ÇÇ)
  (f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ) (f‚ÇÇ : a‚ÇÇ ‚ü∂ b‚ÇÇ) (a : a‚ÇÅ ‚ü∂ a‚ÇÇ) (b : b‚ÇÅ ‚ü∂ b‚ÇÇ) (S : f‚ÇÅ ‚â´ b = a ‚â´ f‚ÇÇ)
  (c‚ÇÅ : brown_factorization f‚ÇÅ) : ‚àÉ (c‚ÇÇ : brown_factorization f‚ÇÇ) (b' : c‚ÇÅ.b' ‚ü∂ c‚ÇÇ.b')
  (hf' : c‚ÇÅ.f' ‚â´ b' = a ‚â´ c‚ÇÇ.f') (hr : c‚ÇÅ.r ‚â´ b = b' ‚â´ c‚ÇÇ.r) (hs : c‚ÇÅ.s ‚â´ b' = b ‚â´ c‚ÇÇ.s),
  (is_cof b ‚Üí is_cof ((pushout_by_cof c‚ÇÅ.f' a c‚ÇÅ.hf').is_pushout.induced b' c‚ÇÇ.f' hf')) ‚àß
  (is_cof a ‚Üí is_acof ((pushout_by_cof c‚ÇÅ.s b c‚ÇÅ.hs.1).is_pushout.induced b' c‚ÇÇ.s hs)) :=
let po_a := pushout_by_cof c‚ÇÅ.f' a c‚ÇÅ.hf',
    a‚ÇÉ := po_a.ob,
    f' := po_a.map‚ÇÅ,
    cof_f' : is_cof f' := pushout_is_cof po_a.is_pushout c‚ÇÅ.hf',
    po_b := pushout_by_cof c‚ÇÅ.s b c‚ÇÅ.hs.1,
    b‚ÇÉ := po_b.ob,
    s := po_b.map‚ÇÅ,
    acof_s : is_acof s := pushout_is_acof po_b.is_pushout c‚ÇÅ.hs,
    r := po_b.is_pushout.induced (c‚ÇÅ.r ‚â´ b) (ùüô _) (by rw [‚Üêassoc, c‚ÇÅ.hsr]; simp),
    f‚ÇÉ : a‚ÇÉ ‚ü∂ b‚ÇÉ := po_a.is_pushout.induced (c‚ÇÅ.r ‚â´ b ‚â´ s) (f‚ÇÇ ‚â´ s) begin
      conv { to_rhs, rw [‚Üêassoc, ‚ÜêS], rw [‚Üêc‚ÇÅ.hf'r, assoc] }, simp
    end,
    a‚ÇÇb‚ÇÇ := pushout_by_cof (! a‚ÇÇ) (! b‚ÇÇ) ha‚ÇÇ,
    -- TODO: lemma here?
    cof_a‚ÇÉ : cofibrant a‚ÇÉ := begin
      change is_cof _,
      convert cof_comp ha‚ÇÇ (pushout_is_cof po_a.is_pushout c‚ÇÅ.hf'),
      apply initial.uniqueness
    end,
    cof_b‚ÇÉ : cofibrant b‚ÇÉ := begin
      change is_cof _,
      convert cof_comp hb‚ÇÇ (pushout_is_cof po_b.is_pushout c‚ÇÅ.hs.1),
      apply initial.uniqueness
    end,
    a‚ÇÉb‚ÇÉ := pushout_by_cof (! a‚ÇÉ) (! b‚ÇÉ) cof_a‚ÇÉ,
    a‚ÇÅ_b‚ÇÅ := c‚ÇÅ.ab.ob,
    cof_a‚ÇÅ_b‚ÇÅ : cofibrant a‚ÇÅ_b‚ÇÅ := begin
      change is_cof _,
      convert cof_comp hb‚ÇÅ (pushout_is_cof c‚ÇÅ.ab.is_pushout ha‚ÇÅ),
      apply initial.uniqueness
    end,
    a‚ÇÉ_b‚ÇÉ := a‚ÇÉb‚ÇÉ.ob,
    cof_a‚ÇÉ_b‚ÇÉ : cofibrant a‚ÇÉ_b‚ÇÉ := begin
      change is_cof _,
      convert cof_comp cof_b‚ÇÉ (pushout_is_cof a‚ÇÉb‚ÇÉ.is_pushout cof_a‚ÇÉ),
      apply initial.uniqueness
    end,
    ‚ü®b‚ÇÇ', b', fs‚ÇÉ', r‚ÇÉ, hfs‚ÇÉ', hr‚ÇÉ, hf'sr, cof_fs‚ÇÉ', weq_r‚ÇÉ, cof_p‚ü© := begin
      refine relative_factorization cof_a‚ÇÅ_b‚ÇÅ cof_a‚ÇÉ_b‚ÇÉ _ c‚ÇÅ.r c‚ÇÅ.hf's c‚ÇÅ.hr
        (a‚ÇÉb‚ÇÉ.is_pushout.induced f‚ÇÉ (ùüô b‚ÇÉ) (initial.uniqueness _ _))
        (pushout_of_maps c‚ÇÅ.ab.is_pushout a‚ÇÉb‚ÇÉ.is_pushout (ùüô _) (a ‚â´ f') (b ‚â´ s)
          (initial.uniqueness _ _) (initial.uniqueness _ _))
        (b ‚â´ s) _,
      apply c‚ÇÅ.ab.is_pushout.uniqueness,
      { slice_lhs 1 2 { simp }, conv { to_lhs, rw [c‚ÇÅ.hf'r, S, assoc] },
        rw induced_pushout_of_maps, simp },
      { slice_lhs 1 2 { simp }, conv { to_lhs, rw [c‚ÇÅ.hsr, id_comp] },
        rw induced_pushout_of_maps, simp }
    end,
    f‚ÇÉ' := a‚ÇÉb‚ÇÉ.map‚ÇÄ ‚â´ fs‚ÇÉ',
    s‚ÇÉ := a‚ÇÉb‚ÇÉ.map‚ÇÅ ‚â´ fs‚ÇÉ',
    f‚ÇÇ' := f' ‚â´ f‚ÇÉ',
    r‚ÇÇ := r‚ÇÉ ‚â´ r,
    s‚ÇÇ := s ‚â´ s‚ÇÉ in
have sr : s ‚â´ r = ùüô _, by simp,
have s‚ÇÇr‚ÇÇ : s‚ÇÇ ‚â´ r‚ÇÇ = ùüô _, begin
  slice_lhs 3 4 { rw hf'sr },
  slice_lhs 2 3 { rw Is_pushout.induced_commutes‚ÇÅ },
  simp
end,
have weq_r‚ÇÇ : is_weq r‚ÇÇ, begin
  refine weq_comp weq_r‚ÇÉ _,
  rw ‚Üêweq_iff_weq_inv sr,
  exact acof_s.2
end,
‚ü®‚ü®a‚ÇÇb‚ÇÇ, b‚ÇÇ', f‚ÇÇ', r‚ÇÇ, s‚ÇÇ,
  cof_comp (pushout_is_cof po_a.is_pushout c‚ÇÅ.hf')
    (cof_comp (pushout_is_cof a‚ÇÉb‚ÇÉ.is_pushout.transpose cof_b‚ÇÉ) cof_fs‚ÇÉ'),
  begin
    have := cof_pushout cof_f' acof_s.1 a‚ÇÇb‚ÇÇ.is_pushout
      (by convert a‚ÇÉb‚ÇÉ.is_pushout; apply initial.uniqueness) (by apply initial.uniqueness),
    convert cof_comp this cof_fs‚ÇÉ',
    apply a‚ÇÇb‚ÇÇ.is_pushout.uniqueness; conv { to_rhs, rw ‚Üêassoc }; simp
  end,
  begin
    refine ‚ü®_, (weq_iff_weq_inv s‚ÇÇr‚ÇÇ).mpr weq_r‚ÇÇ‚ü©,
    exact cof_comp acof_s.1 (cof_comp (pushout_is_cof a‚ÇÉb‚ÇÉ.is_pushout cof_a‚ÇÉ) cof_fs‚ÇÉ')
  end,
  begin
    slice_lhs 3 4 { rw hf'sr },
    slice_lhs 2 3 { rw Is_pushout.induced_commutes‚ÇÄ },
    slice_lhs 1 2 { rw Is_pushout.induced_commutes‚ÇÅ },
    simp [sr]
  end,
  s‚ÇÇr‚ÇÇ‚ü©,
 b',
 begin
   convert congr_arg (Œª z, c‚ÇÅ.ab.map‚ÇÄ ‚â´ z) hfs‚ÇÉ' using 1,
   { slice_rhs 1 2 { rw Is_pushout.induced_commutes‚ÇÄ } },
   { slice_rhs 1 2 { dsimp [pushout_of_maps], rw Is_pushout.induced_commutes‚ÇÄ }, simp }
 end,
 begin
   have : c‚ÇÅ.r ‚â´ b = c‚ÇÅ.r ‚â´ b ‚â´ (s ‚â´ r), by rw [sr]; simp,
   rw this,
   slice_lhs 1 3 { rw hr‚ÇÉ },
   simp
 end,
 begin
   convert congr_arg (Œª z, c‚ÇÅ.ab.map‚ÇÅ ‚â´ z) hfs‚ÇÉ' using 1,
   { slice_rhs 1 2 { rw Is_pushout.induced_commutes‚ÇÅ } },
   { slice_rhs 1 2 { dsimp [pushout_of_maps], rw Is_pushout.induced_commutes‚ÇÅ }, simp }
 end,
 begin
   intro hb,
   let v := _,
   let S‚ÇÇ : cof_square v b' := ‚ü®_, _, _, _, cof_p‚ü©,
   let S‚ÇÅ : cof_square a v,
   { refine ‚ü®c‚ÇÅ.ab.map‚ÇÄ, f' ‚â´ a‚ÇÉb‚ÇÉ.map‚ÇÄ,
       by simp [v, pushout_of_maps], pushout_is_cof c‚ÇÅ.ab.is_pushout.transpose hb‚ÇÅ, _‚ü©,
     let po : pushout _ _ := _,
     change is_cof (po.is_pushout.induced _ _ _),
     have : is_cof (b ‚â´ s) := cof_comp hb acof_s.1,
     convert cof_pushout this cof_f'
       (Is_pushout_of_Is_pushout_of_Is_pushout c‚ÇÅ.ab.is_pushout.transpose po.is_pushout)
       (by convert a‚ÇÉb‚ÇÉ.is_pushout.transpose; apply initial.uniqueness)
       (by apply initial.uniqueness) using 1,
     symmetry,
     apply pushout_induced_eq_iff; simp },
   have : c‚ÇÅ.f' = S‚ÇÅ.f‚ÇÅ ‚â´ S‚ÇÇ.f‚ÇÅ, by simp,
   have S : is_cof_square a b' c‚ÇÅ.f' _ :=
     is_cof_square_comp ‚ü®S‚ÇÅ, rfl, rfl‚ü© ‚ü®S‚ÇÇ, rfl, rfl‚ü© this rfl,
   convert S.corner_cof.snd.snd,
   simp
 end,
 begin
   intro ha,
   let G := _,
   change is_acof G,
   suffices : is_cof G,
   { refine ‚ü®this, _‚ü©,
     have sG : s ‚â´ G = s‚ÇÇ, by simp,
     have : is_acof s := pushout_is_acof po_b.is_pushout c‚ÇÅ.hs,
     refine category_with_weak_equivalences.weq_of_comp_weq_left this.2 _,
     rw sG,
     exact (weq_iff_weq_inv s‚ÇÇr‚ÇÇ).mpr weq_r‚ÇÇ },
   -- From here on, the proof resembles the previous one
   let v := _,
   let S‚ÇÇ : cof_square v b' := ‚ü®_, _, _, _, cof_p‚ü©,
   let S‚ÇÅ : cof_square b v,
   { refine ‚ü®c‚ÇÅ.ab.map‚ÇÅ, s ‚â´ a‚ÇÉb‚ÇÉ.map‚ÇÅ,
       by simp [v, pushout_of_maps], pushout_is_cof c‚ÇÅ.ab.is_pushout ha‚ÇÅ, _‚ü©,
     let po : pushout _ _ := _,
     change is_cof (po.is_pushout.induced _ _ _),
     have : is_cof (a ‚â´ f') := cof_comp ha cof_f',
     convert cof_pushout this acof_s.1
       (Is_pushout_of_Is_pushout_of_Is_pushout c‚ÇÅ.ab.is_pushout po.is_pushout)
       (by convert a‚ÇÉb‚ÇÉ.is_pushout; apply initial.uniqueness)
       (by apply initial.uniqueness) using 1,
     symmetry,
     apply pushout_induced_eq_iff; simp },
   have : c‚ÇÅ.s = S‚ÇÅ.f‚ÇÅ ‚â´ S‚ÇÇ.f‚ÇÅ, by simp,
   have S : is_cof_square b b' c‚ÇÅ.s _ :=
     is_cof_square_comp ‚ü®S‚ÇÅ, rfl, rfl‚ü© ‚ü®S‚ÇÇ, rfl, rfl‚ü© this rfl,
   convert S.corner_cof.snd.snd,
   simp
 end‚ü©

end homotopy_theory.cofibrations
