import category_theory.base
import category_theory.replete

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

universes v u

namespace homotopy_theory.weak_equivalences

class has_weak_equivalences (C : Type u) [category C] :=
(is_weq : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí Prop)

def is_weq {C : Type u} [category C] [has_weak_equivalences C] ‚¶Éa b : C‚¶Ñ (f : a ‚ü∂ b) :=
has_weak_equivalences.is_weq f

-- TODO: should this be a Prop mix-in?
class category_with_weak_equivalences (C : Type u) [category.{v} C]
  extends has_weak_equivalences C :=
[weq_replete_wide : replete_wide_subcategory.{v} C is_weq]
(weq_of_comp_weq_left : ‚àÄ ‚¶Éa b c : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c},
  is_weq f ‚Üí is_weq (g ‚àò f) ‚Üí is_weq g)
(weq_of_comp_weq_right : ‚àÄ ‚¶Éa b c : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c},
  is_weq g ‚Üí is_weq (g ‚àò f) ‚Üí is_weq f)

instance (C : Type u) [category.{v} C] [category_with_weak_equivalences C] :
  replete_wide_subcategory.{v} C is_weq :=
category_with_weak_equivalences.weq_replete_wide

section
variables {C : Type u} [cat : category.{v} C] [category_with_weak_equivalences C]
include cat

lemma weq_id (a : C) : is_weq (ùüô a) := mem_id a
lemma weq_comp {a b c : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c} :
  is_weq f ‚Üí is_weq g ‚Üí is_weq (g ‚àò f) := mem_comp
lemma weq_iso {a b : C} (i : a ‚âÖ b) : is_weq i.hom := mem_iso i

lemma weq_iff_weq_inv {a b : C} {f : a ‚ü∂ b} {g : b ‚ü∂ a} (h : f ‚â´ g = ùüô _) :
  is_weq f ‚Üî is_weq g :=
begin
  split; intro H;
  { have : is_weq (g ‚àò f) := by convert weq_id _,
    apply category_with_weak_equivalences.weq_of_comp_weq_left H this <|>
    apply category_with_weak_equivalences.weq_of_comp_weq_right H this }
end

end

-- The two-out-of-six property.
class homotopical_category (C : Type u) [category.{v} C]
  extends category_with_weak_equivalences C :=
(two_out_of_six : ‚àÄ ‚¶Éa b c d : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d},
  is_weq (h ‚àò g) ‚Üí is_weq (g ‚àò f) ‚Üí is_weq g)

section
variables {C : Type u} [cat : category.{v} C] [homotopical_category C]
include cat

lemma weq_two_out_of_six_g {a b c d : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d}
  (hg : is_weq (h ‚àò g)) (gf : is_weq (g ‚àò f)) : is_weq g :=
homotopical_category.two_out_of_six hg gf

lemma weq_two_out_of_six_f {a b c d : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d}
  (hg : is_weq (h ‚àò g)) (gf : is_weq (g ‚àò f)) : is_weq f :=
have wg : is_weq g := weq_two_out_of_six_g hg gf,
category_with_weak_equivalences.weq_of_comp_weq_right wg gf

lemma weq_two_out_of_six_h {a b c d : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d}
  (hg : is_weq (h ‚àò g)) (gf : is_weq (g ‚àò f)) : is_weq h :=
have wg : is_weq g := weq_two_out_of_six_g hg gf,
category_with_weak_equivalences.weq_of_comp_weq_left wg hg
end

section isomorphisms
variables {C : Type u} [cat : category.{v} C]
include cat

def is_iso ‚¶Éa b : C‚¶Ñ (f : a ‚ü∂ b) : Prop := ‚àÉ i : a ‚âÖ b, i.hom = f

lemma iso_iso ‚¶Éa b : C‚¶Ñ (i : a ‚âÖ b) : is_iso i.hom := ‚ü®i, rfl‚ü©
lemma iso_comp ‚¶Éa b c : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c} :
  is_iso f ‚Üí is_iso g ‚Üí is_iso (g ‚àò f) :=
assume ‚ü®i, hi‚ü© ‚ü®j, hj‚ü©, ‚ü®i.trans j, by rw [‚Üêhi, ‚Üêhj]; refl‚ü©

lemma iso_of_comp_iso_left ‚¶Éa b c : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c} :
  is_iso f ‚Üí is_iso (g ‚àò f) ‚Üí is_iso g :=
assume ‚ü®i, hi‚ü© ‚ü®j, hj‚ü©,
  ‚ü®i.symm.trans j, show j.hom ‚àò i.inv = g, by rw [hj, ‚Üêhi]; simp‚ü©
lemma iso_of_comp_iso_right ‚¶Éa b c : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c} :
  is_iso g ‚Üí is_iso (g ‚àò f) ‚Üí is_iso f :=
assume ‚ü®i, hi‚ü© ‚ü®j, hj‚ü©,
  ‚ü®j.trans i.symm, show i.inv ‚àò j.hom = f, by rw [hj, ‚Üêhi]; simp‚ü©

lemma iso_two_out_of_six ‚¶Éa b c d : C‚¶Ñ {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d} :
  is_iso (h ‚àò g) ‚Üí is_iso (g ‚àò f) ‚Üí is_iso g :=
assume ‚ü®i, hi‚ü© ‚ü®j, hj‚ü©,
  let g' := i.inv ‚àò h in
  have g'g : g' ‚àò g = ùüô _, by rw [‚Üêassoc, ‚Üêhi]; simp,
  let g'' := f ‚àò j.inv in
  have gg'' : g ‚àò g'' = ùüô _, by rw [assoc, ‚Üêhj]; simp,
  have g' = g'', from calc
    g' = g' ‚àò (g ‚àò g'')  : by rw gg''; simp
   ... = (g' ‚àò g) ‚àò g''  : by simp
   ... = g''             : by rw g'g; simp; refl,
  ‚ü®‚ü®g, g', g'g, by rw this; exact gg''‚ü©, rfl‚ü©

instance is_iso.replete_wide_subcategory : replete_wide_subcategory.{v} C is_iso :=
replete_wide_subcategory.mk' iso_iso iso_comp

def isomorphisms_as_weak_equivalences : category_with_weak_equivalences C :=
{ is_weq := is_iso,
  weq_of_comp_weq_left := iso_of_comp_iso_left,
  weq_of_comp_weq_right := iso_of_comp_iso_right }

def isomorphisms_as_homotopical_category : homotopical_category C :=
{ two_out_of_six := iso_two_out_of_six,
  .. isomorphisms_as_weak_equivalences }

end isomorphisms

section preimage
-- TODO: generalize to different universes?
variables {C D : Type u} [catC : category.{v} C] [catD : category.{v} D]
include catC catD
variables (F : C ‚Üù D)

def preimage_weq (weqD : has_weak_equivalences D) : has_weak_equivalences C :=
{ is_weq := Œª a b f, is_weq (F &> f) }

instance preimage_weq.replete_wide_subcategory [weqD : category_with_weak_equivalences D] :
  replete_wide_subcategory.{v} C (preimage_weq F weqD.to_has_weak_equivalences).is_weq :=
replete_wide_subcategory.mk'
    (Œª a b i, weq_iso (F.map_iso i))
    (Œª a b c f g hf hg, show is_weq (F &> (g ‚àò f)),
      by rw F.map_comp; exact weq_comp hf hg)

def preimage_with_weak_equivalences [weqD : category_with_weak_equivalences D] :
  category_with_weak_equivalences C :=
{ to_has_weak_equivalences := preimage_weq F weqD.to_has_weak_equivalences,
  weq_of_comp_weq_left := Œª a b c f g hf hgf, begin
    change is_weq (F &> (g ‚àò f)) at hgf, rw F.map_comp at hgf,
    exact category_with_weak_equivalences.weq_of_comp_weq_left hf hgf
  end,
  weq_of_comp_weq_right := Œª a b c f g hg hgf, begin
    change is_weq (F &> (g ‚àò f)) at hgf, rw F.map_comp at hgf,
    exact category_with_weak_equivalences.weq_of_comp_weq_right hg hgf
  end }

end preimage

end homotopy_theory.weak_equivalences
