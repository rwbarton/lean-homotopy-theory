import tactic.slice
import category_theory.colimit_lemmas
import category_theory.pushout_fold
import homotopy_theory.formal.cofibrations.cofibration_category
import homotopy_theory.formal.cofibrations.cylinder
import homotopy_theory.formal.cofibrations.factorization_from_cylinder
import homotopy_theory.formal.cofibrations.homotopy
import homotopy_theory.formal.cofibrations.left_proper
import .cylinder_object
import .dold

universes v u

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
open homotopy_theory.cylinder (renaming homotopic_rel ‚Üí homotopic_rel_cylinder)
open homotopy_theory.weak_equivalences
open precofibration_category

-- An I-category gives rise to a cofibration category with the same
-- cofibrations in which the weak equivalences are the homotopy
-- equivalences.

variables {C : Type u} [category.{v} C]
  [has_initial_object.{v} C] [has_coproducts.{v} C] [I_category.{v} C]

-- Every object is fibrant.
lemma all_objects_fibrant (x : C) : fibrant x :=
assume y j ‚ü®jc, jw‚ü©,
let ‚ü®‚ü®r, h, H‚ü©‚ü© := (heq_iff_sdr_inclusion jc).mp jw in ‚ü®r, h‚ü©

instance I_category.cofibration_category : cofibration_category.{v} C :=
cofibration_category.mk_from_cylinder
  (assume a b a' b' f g f' g' po ‚ü®fc, fw‚ü©,
    ‚ü®precofibration_category.pushout_is_cof po fc, pushout_is_acof po fc fw‚ü©)
  (assume a, ‚ü®I.obj a, ii @> a, p @> a, cof_ii a, heq_p, pii‚ü©)
  (assume x, ‚ü®x, ùüô x, ‚ü®cof_id x, weq_id x‚ü©, all_objects_fibrant x‚ü©)

-- The functor I produces cylinder objects in the general sense of
-- cofibration categories.
def canonical_cylinder (b : C) :
  relative_cylinder (all_objects_cofibrant.cofibrant.{v} b) :=
‚ü®I.obj b,
 (pushout_by_cof (!b) (!b) _).is_pushout.induced (i 0 @> b) (i 1 @> b)
   (category_theory.initial.uniqueness _ _),
 p @> b,
 -- We proved ii : b ‚äî b ‚Üí Ib is a cofibration; need to massage this
 -- into a map from the pushout over the initial object.
 let po := pushout_by_cof (!b) (!b) (all_objects_cofibrant.cofibrant.{v} b),
     -- The map we need to show is a cofibration
     ii' := po.is_pushout.induced (i 0 @> b) (i 1 @> b)
       (category_theory.initial.uniqueness _ _),
     c : Is_coproduct po.map‚ÇÄ po.map‚ÇÅ :=
       Is_coproduct_of_Is_pushout_of_Is_initial po.is_pushout
         has_initial_object.initial_object.is_initial_object,
     j : iso (b ‚äî b) po.ob := isomorphic_coprod_of_Is_coproduct c in
 have ii' ‚àò j.hom = ii @> b, begin
   dsimp [j, isomorphic_coprod_of_Is_coproduct];
   apply coprod.uniqueness; rw ‚Üêassoc; simp [ii]
 end,
 have ii' = ii @> b ‚àò j.inv, by rw ‚Üêthis; simp,
 show is_cof ii',
 by rw this; exact cof_comp (cof_iso j.symm) (cof_ii b),
 heq_p,
 begin
   apply (pushout_by_cof (!b) (!b) _).is_pushout.uniqueness;
   { rw ‚Üêassoc, simp }
 end‚ü©

/-
         I a ‚Üí a
          ‚Üì po ‚Üì
 b ‚äî b ‚Üí I b ‚Üí c ‚Üí b
   a
-/
def canonical_relative_cylinder {a b : C} {j : a ‚ü∂ b} (hj : is_cof j) :
  relative_cylinder hj :=
let po := pushout_by_cof (I.map j) (p.app a) (I_preserves_cofibrations hj) in
‚ü®po.ob,
 (pushout_by_cof j j _).is_pushout.induced ((i 0).app b ‚â´ po.map‚ÇÄ) ((i 1).app b ‚â´ po.map‚ÇÄ)
   begin
     erw [‚Üêassoc, ‚Üêassoc, (i 0).naturality, (i 1).naturality],
     rw [assoc, assoc, po.is_pushout.commutes, ‚Üêassoc, ‚Üêassoc],
     simp
   end,
 po.is_pushout.induced (p.app b) j (p.naturality j),

/-
 a ‚äî a ‚Üí I a ‚Üí   a
   ‚Üì  po‚ÇÅ ‚Üì po‚ÇÇ  ‚Üì
 b ‚äî b ‚Üí  ‚¨ù  ‚Üí b ‚äî b
                 a
          ‚Üì po‚ÇÉ  ‚Üì
         I b ‚Üí   c ‚Üí b
-/
 begin
   let po‚ÇÄ := pushout_by_cof j j hj,
   let abb : a ‚ü∂ po‚ÇÄ.ob := po‚ÇÄ.map‚ÇÄ ‚àò j,
   let po‚ÇÅ := pushout_by_cof _ (ii.app a) (cof_coprod hj hj),
   let l := po‚ÇÅ.is_pushout.induced (coprod.induced po‚ÇÄ.map‚ÇÄ po‚ÇÄ.map‚ÇÅ) (abb ‚àò p.app a)
   begin
     apply coprod.uniqueness,
       { rw [‚Üêassoc, coprod_of_maps_commutes‚ÇÄ, assoc, coprod.induced_commutes‚ÇÄ],
         rw [iii‚ÇÄ_assoc, ‚Üêassoc, pi_components, id_comp] },
       { rw [‚Üêassoc, coprod_of_maps_commutes‚ÇÅ, assoc, coprod.induced_commutes‚ÇÅ],
         rw [iii‚ÇÅ_assoc, ‚Üêassoc, pi_components, id_comp, ‚Üêpo‚ÇÄ.is_pushout.commutes] }
   end,
   have po‚ÇÅ‚ÇÇ : Is_pushout (coprod_of_maps j j) (coprod.fold a) _ _ :=
     Is_pushout_fold po‚ÇÄ.is_pushout,
   have po‚ÇÇ : Is_pushout po‚ÇÅ.map‚ÇÅ (p.app a) l abb,
   { refine Is_pushout_of_Is_pushout_of_Is_pushout' po‚ÇÅ.is_pushout _ _,
     { convert po‚ÇÅ‚ÇÇ,
       { apply pii },
       { simp } },
     { simp } },
   have po‚ÇÇ‚ÇÉ : Is_pushout (I.map j) (p.app a) _ _ := po.is_pushout,
   let m := _,                  -- naming part of the type of a hypothesis
   have : is_cof m := I_category.relative_cylinder j hj,
   let n := _,                  -- naming part of the type of the goal
   change is_cof n,
   have po‚ÇÉ : Is_pushout m l po.map‚ÇÄ n,
   { refine Is_pushout_of_Is_pushout_of_Is_pushout_vert' po‚ÇÇ _ _,
     convert po‚ÇÇ‚ÇÉ,
     { simp, refl },
     { have : po.map‚ÇÄ ‚àò (i 0).app b ‚àò j = po.map‚ÇÅ,
       { rw ‚Üêassoc,
         erw (i 0).naturality,
         rw [assoc, po.is_pushout.commutes, ‚Üêassoc, pi_components, id_comp] },
       simpa using this },
     { apply po‚ÇÅ.is_pushout.uniqueness; rw [‚Üêassoc, ‚Üêassoc],
       { simp only [Is_pushout.induced_commutes‚ÇÄ, Is_pushout.induced_commutes‚ÇÅ],
         apply coprod.uniqueness; rw [‚Üêassoc, ‚Üêassoc]; simp },
       { simp only [assoc, Is_pushout.induced_commutes‚ÇÄ, Is_pushout.induced_commutes‚ÇÅ],
         slice_rhs 2 3 { change (i 0).app b ‚àò ((functor.id _).map j), rw (i 0).naturality },
         simp only [assoc],
         erw [po.is_pushout.commutes],
         slice_rhs 2 3 { rw pi_components },
         dsimp, simp } } },
   exact pushout_is_cof po‚ÇÉ this
 end,
 begin
   have : is_weq po.map‚ÇÄ :=
     left_proper.pushout_weq_by_cof po.is_pushout (I_preserves_cofibrations hj) heq_p,
   refine category_with_weak_equivalences.weq_of_comp_weq_left this _,
   simpa using heq_p,
 end,
 begin
   symmetry,
   apply pushout_induced_eq_iff; rw ‚Üêassoc; simp
 end‚ü©

section homotopy
variables {a b x : C} {j : a ‚ü∂ b} (hj : is_cof j) (f‚ÇÄ f‚ÇÅ : b ‚ü∂ x)

lemma homotopic_rel_iff_cylinder :
  homotopic_rel hj f‚ÇÄ f‚ÇÅ ‚Üî homotopic_rel_cylinder j f‚ÇÄ f‚ÇÅ :=
let po := pushout_by_cof (I.map j) (p.app a) (I_preserves_cofibrations hj) in
begin
  split; intro H,
  { rcases homotopic_rel' (canonical_relative_cylinder hj) (all_objects_fibrant x) f‚ÇÄ f‚ÇÅ H
      with ‚ü®H, Hi‚ÇÄ, Hi‚ÇÅ‚ü©,
    dsimp [canonical_relative_cylinder, relative_cylinder.i‚ÇÄ, relative_cylinder.i‚ÇÅ] at Hi‚ÇÄ Hi‚ÇÅ,
    simp at Hi‚ÇÄ Hi‚ÇÅ,
    refine ‚ü®‚ü®po.map‚ÇÄ ‚â´ H, _, _‚ü©, _‚ü©,
    { rw [‚ÜêHi‚ÇÄ, ‚Üêassoc, ‚Üêassoc], refl },
    { rw [‚ÜêHi‚ÇÅ, ‚Üêassoc, ‚Üêassoc], refl },
    { dsimp [homotopy.is_rel],
      rw [‚ÜêHi‚ÇÄ],
      slice_rhs 2 3 { change (functor.id _).map j ‚â´ (i 0).app b, rw (i 0).naturality },
      slice_lhs 1 2 { rw po.is_pushout.commutes },
      slice_rhs 3 4 { change I.map j ‚â´ po.map‚ÇÄ, rw po.is_pushout.commutes },
      slice_rhs 2 3 { rw pi_components },
      simp } },
  { rcases H with ‚ü®‚ü®H, Hi‚ÇÄ, Hi‚ÇÅ‚ü©, r‚ü©,
    refine ‚ü®canonical_relative_cylinder hj, ‚ü®‚ü®_, _, _‚ü©‚ü©‚ü©,
    refine po.is_pushout.induced H (j ‚â´ f‚ÇÄ) r,
    { convert Hi‚ÇÄ using 1,
      dsimp [relative_cylinder.i‚ÇÄ, canonical_relative_cylinder], simp },
    { convert Hi‚ÇÅ using 1,
      dsimp [relative_cylinder.i‚ÇÅ, canonical_relative_cylinder], simp } }
end

end homotopy

end homotopy_theory.cofibrations
