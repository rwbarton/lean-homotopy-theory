import data.quot
import .homotopy_classes

universes v u

open category_theory
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace homotopy_theory.cofibrations
-- Homotopy equivalences as the weak equivalences of an I-category.
open homotopy_theory.weak_equivalences

variables {C : Type u} [category.{v} C]
  [has_initial_object.{v} C] [has_coproducts.{v} C] [I_category.{v} C]

instance homotopy_category.category_with_weak_equivalences :
  category_with_weak_equivalences (category_mod_congruence C homotopy_congruence) :=
isomorphisms_as_weak_equivalences

instance I_category.category_with_weak_equivalences : category_with_weak_equivalences C :=
preimage_with_weak_equivalences (quotient_functor C homotopy_congruence)

def homotopy_equivalence {x y : C} (f : x ‚ü∂ y) : Prop := is_weq f

lemma homotopic_iff_equal_in_ho {x y : C} {f g : x ‚ü∂ y} : f ‚âÉ g ‚Üî ‚ü¶f‚üß = ‚ü¶g‚üß :=
by symmetry; apply quotient.eq

lemma homotopy_equivalence_iff {x y : C} {f : x ‚ü∂ y} :
  homotopy_equivalence f ‚Üî ‚àÉ g, g ‚àò f ‚âÉ ùüô _ ‚àß f ‚àò g ‚âÉ ùüô _ :=
begin
  split,
  { intro h, cases h with i hi,
    cases quotient.exists_rep i.inv with g hg,
    existsi g, split; rw homotopic_iff_equal_in_ho,
    { have := i.hom_inv_id',
      rw [hi, ‚Üêhg] at this, exact this },
    { have := i.inv_hom_id',
      rw [hi, ‚Üêhg] at this, exact this } },
  { intro h, rcases h with ‚ü®g, h‚ÇÅ, h‚ÇÇ‚ü©,
    refine ‚ü®iso.mk ‚ü¶f‚üß ‚ü¶g‚üß _ _, rfl‚ü©;
    { dsimp [auto_param], change ‚ü¶_‚üß = ‚ü¶_‚üß, rw ‚Üêhomotopic_iff_equal_in_ho,
      exact h‚ÇÅ <|> exact h‚ÇÇ } }
end

end homotopy_theory.cofibrations
