import category_theory.colimits
import category_theory.isomorphism
import category_theory.preserves_colimits
import category_theory.replete
import .definitions
import category_theory.functor

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

universes v u

namespace homotopy_theory.cylinder

section hep

variables {C : Type u} [category.{v} C] [inst1 : has_cylinder C] [inst2 : has_cylinder_with_involution C]

include inst1

-- The homotopy extension property with respect to the given cylinder
-- functor, "on side Œµ".
def hep (Œµ) {A X : C} (j : A ‚ü∂ X) : Prop :=
‚àÄ Y (f : X ‚ü∂ Y) (H : I.obj A ‚ü∂ Y), f ‚àò j = H ‚àò i Œµ @> A ‚Üí
  ‚àÉ H' : I.obj X ‚ü∂ Y, H' ‚àò i Œµ @> X = f ‚àß H' ‚àò I &> j = H

lemma hep_of_isomorphism (Œµ) {A X : C} (h : iso A X) : hep Œµ h.hom :=
assume Y f H e,
  ‚ü®H ‚àò I &> h.inv,
   by erw [‚Üêassoc, ‚Üê(i Œµ).naturality, assoc, ‚Üêe, iso.inv_hom_id_assoc],
   by erw [‚Üêfunctor.map_iso_hom, iso.hom_inv_id_assoc]‚ü©

lemma hep_id (Œµ) {X : C} : hep Œµ (ùüô X) :=
hep_of_isomorphism Œµ (iso.refl X)

lemma hep_comp (Œµ) {A B X : C} {f : A ‚ü∂ B} {g : B ‚ü∂ X} (hf : hep Œµ f) (hg : hep Œµ g) :
  hep Œµ (g ‚àò f) :=
assume Y k H e,
  let ‚ü®J, Je‚ÇÅ, Je‚ÇÇ‚ü© := hf Y (k ‚àò g) H (by convert e using 1; simp) in
  let ‚ü®K, Ke‚ÇÅ, Ke‚ÇÇ‚ü© := hg Y k J Je‚ÇÅ.symm in
  ‚ü®K, Ke‚ÇÅ, by rw [I.map_comp, assoc, Ke‚ÇÇ, Je‚ÇÇ]‚ü©

instance hep_replete (Œµ) : replete_wide_subcategory.{v} C (Œª a b, hep Œµ) :=
replete_wide_subcategory.mk' (Œª a b, hep_of_isomorphism Œµ) (Œª a b c f g, hep_comp Œµ)

lemma hep_pushout (Œµ) {A B A' B' : C} {f : A ‚ü∂ B} {g : A ‚ü∂ A'} {f' : A' ‚ü∂ B'} {g' : B ‚ü∂ B'}
  (po : Is_pushout f g g' f') (po' : Is_pushout (I &> f) (I &> g) (I &> g') (I &> f'))
  (hf : hep Œµ f) : hep Œµ f' :=
assume Y h H e,
  have (h ‚àò g') ‚àò f = (H ‚àò (I &> g)) ‚àò i Œµ @> A, begin
    erw [‚Üêassoc, ‚Üêassoc, po.commutes, ‚Üê(i Œµ).naturality],
    simp [e]
  end,
  let ‚ü®J, Je‚ÇÅ, Je‚ÇÇ‚ü© := hf Y (h ‚àò g') (H ‚àò (I &> g)) this in
  let K := po'.induced J H Je‚ÇÇ in
  ‚ü®K,
   begin
     apply po.uniqueness; erw [‚Üêassoc, (i Œµ).naturality, assoc],
     { rw [‚ÜêJe‚ÇÅ], simp },
     { rw [e], simp }
   end,
   po'.induced_commutes‚ÇÅ J H Je‚ÇÇ‚ü©

lemma hep_pushout' [preserves_pushouts (I : C ‚Üù C)] (Œµ) {A B A' B' : C}
  {f : A ‚ü∂ B} {g : A ‚ü∂ A'} {f' : A' ‚ü∂ B'} {g' : B ‚ü∂ B'} (po : Is_pushout f g g' f')
  (hf : hep Œµ f) : hep Œµ f' :=
hep_pushout Œµ po (preserves_pushouts.Is_pushout_of_Is_pushout po) hf

lemma hep_iff_pushout_retract (Œµ) {A X : C} {j : A ‚ü∂ X}
  {Z : C} {i' : X ‚ü∂ Z} {j' : I.obj A ‚ü∂ Z} (po : Is_pushout j (i Œµ @> A) i' j') :
  hep Œµ j ‚Üî ‚àÉ r : I.obj X ‚ü∂ Z,
    r ‚àò po.induced (i Œµ @> X) (I &> j) ((i Œµ).naturality _) = ùüô _ :=
iff.intro
  (assume h,
    let ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü© := h Z i' j' po.commutes in
    ‚ü®r, by apply po.uniqueness; rw ‚Üêassoc; simpa‚ü©)
  (assume ‚ü®r, hr‚ü© Y f H e,
    have hr‚ÇÅ : r ‚àò i Œµ @> X = i', from eq.symm $ calc
      i' = ùüô _ ‚àò i' : by simp
     ... = (r ‚àò _) ‚àò i' : by rw hr
     ... = _ : by rw ‚Üêassoc; simp,
    have hr‚ÇÇ : r ‚àò I &> j = j', from eq.symm $ calc
      j' = ùüô _ ‚àò j' : by simp
     ... = (r ‚àò _) ‚àò j' : by rw hr
     ... = _ : by rw ‚Üêassoc; simp,
    ‚ü®po.induced f H e ‚àò r,
     by rw [‚Üêassoc, hr‚ÇÅ]; simp,
     by rw [‚Üêassoc, hr‚ÇÇ]; simp‚ü©)

lemma hep_initial_induced (Œµ) {A X : C} {j : A ‚ü∂ X}
  (Ai : Is_initial_object.{v} A) (IAi : Is_initial_object.{v} (I.obj A)) :
  hep Œµ j :=
let po : Is_pushout j (i Œµ @> A) (ùüô X) IAi.induced := begin
  convert Is_pushout_of_isomorphic (Is_pushout.refl j) j (i Œµ @> A)
    (iso.refl A) (iso.refl X) (initial_object.unique IAi Ai)
    (Ai.uniqueness _ _) (Ai.uniqueness _ _), { simp }, { apply IAi.uniqueness }
end in
(hep_iff_pushout_retract Œµ po).mpr ‚ü®p @> X, po.uniqueness
  (by rw [‚Üêassoc, po.induced_commutes‚ÇÄ]; simp)
  (IAi.uniqueness _ _)‚ü©

-- The two-sided homotopy extension property.
@[reducible] def two_sided_hep {A X : C} (j : A ‚ü∂ X) : Prop := ‚àÄ Œµ, hep Œµ j

omit inst1
include inst2

lemma hep_involution {Œµ} {A X : C} {j : A ‚ü∂ X} (h : hep Œµ j) : hep Œµ.v j :=
assume Y f H e,
  let ‚ü®H‚ÇÅ, h‚ÇÅ, h‚ÇÇ‚ü© := h Y f (H ‚àò v @> A)
    (by convert e using 1; rw [‚Üêassoc]; simp) in
  ‚ü®H‚ÇÅ ‚àò v @> X,
   by rw ‚Üêassoc; simpa using h‚ÇÅ,
   calc
     H‚ÇÅ ‚àò v @> X ‚àò I &> j
       = H‚ÇÅ ‚àò (v @> X ‚àò I &> j) : by rw assoc
   ... = H‚ÇÅ ‚àò (I &> j ‚àò v @> A) : by erw v.naturality; refl
   ... = (H‚ÇÅ ‚àò I &> j) ‚àò v @> A : by simp
   ... = (H ‚àò v @> A) ‚àò v @> A  : by rw h‚ÇÇ
   ... = H                      : by rw ‚Üêassoc; simp; dsimp; simp‚ü©

lemma two_sided_hep_iff_hep {Œµ} {A X : C} {j : A ‚ü∂ X} : two_sided_hep j ‚Üî hep Œµ j :=
have ‚àÄ Œµ', Œµ' = Œµ ‚à® Œµ' = Œµ.v, by intro Œµ'; cases Œµ; cases Œµ'; simp; refl,
iff.intro (assume h, h Œµ)
  (assume h Œµ', begin
    cases this Œµ'; subst Œµ', { exact h }, { exact hep_involution h }
  end)

end hep

end homotopy_theory.cylinder
