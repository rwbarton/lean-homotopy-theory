import category_theory.base
import category_theory.functor

universes v u

namespace category_theory
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

variables {C : Type u} [category.{v} C]

class congruence (r : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí (a ‚ü∂ b) ‚Üí Prop) :=
(is_equiv : ‚àÄ {a b}, equivalence (@r a b))
(congr : ‚àÄ {a b c} {f f' : a ‚ü∂ b} {g g' : b ‚ü∂ c}, r f f' ‚Üí r g g' ‚Üí r (g ‚àò f) (g' ‚àò f'))

def congruence.mk' {r : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí (a ‚ü∂ b) ‚Üí Prop}
  (is_equiv : ‚àÄ {a b}, equivalence (@r a b))
  (congr_left : ‚àÄ {a b c} {f f' : a ‚ü∂ b} {g : b ‚ü∂ c}, r f f' ‚Üí r (g ‚àò f) (g ‚àò f'))
  (congr_right : ‚àÄ {a b c} {f : a ‚ü∂ b} {g g' : b ‚ü∂ c}, r g g' ‚Üí r (g ‚àò f) (g' ‚àò f)) :
  congruence r :=
{ is_equiv := @is_equiv,
  congr := Œª _ _ _ f f' g g' rff' rgg',
    is_equiv.2.2 (congr_right rgg') (congr_left rff') }

variables (C)
variables (r : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí (a ‚ü∂ b) ‚Üí Prop) [congruence r]
include r
def category_mod_congruence : Type u := C
omit r

instance Hom.setoid (a b : C) : setoid (a ‚ü∂ b) :=
{ r := @r a b, iseqv := congruence.is_equiv }

instance category_mod_congruence.category : category (category_mod_congruence C r) :=
{ hom := Œª a b, quotient (Hom.setoid C r a b),
  id := Œª a, ‚ü¶ùüô a‚üß,
  comp := Œª a b c f‚ÇÄ g‚ÇÄ, quotient.lift_on‚ÇÇ f‚ÇÄ g‚ÇÄ (Œª f g, ‚ü¶g ‚àò f‚üß)
    (Œª f g f' g' rff' rgg', quotient.sound (congruence.congr rff' rgg' : r _ _)),
  id_comp' := begin rintros a b ‚ü®f‚ü©, change quot.mk _ _ = _, simp end,
  comp_id' := begin rintros a b ‚ü®f‚ü©, change quot.mk _ _ = _, simp end,
  assoc' := begin rintros a b c d ‚ü®f‚ü© ‚ü®g‚ü© ‚ü®h‚ü©, change quot.mk _ _ = quot.mk _ _, simp end
 }

def quotient_functor : C ‚Üù category_mod_congruence C r :=
{ obj := Œª a, a, map := Œª a b f, ‚ü¶f‚üß }

end category_theory
