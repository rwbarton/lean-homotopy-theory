import category_theory.base
import category_theory.isomorphism

open category_theory
open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

universes v u

namespace category_theory

variables (C : Type u) [category.{v} C]

class wide_subcategory (D : Œ† {a b : C}, (a ‚ü∂ b) ‚Üí Prop) : Prop :=
(mem_id {} : ‚àÄ (a : C), D (ùüô a))
(mem_comp {} : ‚àÄ {a b c : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c}, D f ‚Üí D g ‚Üí D (g ‚àò f))
export wide_subcategory (mem_id mem_comp)

class replete_wide_subcategory D extends wide_subcategory.{v} C D : Prop :=
(mem_iso {} : ‚àÄ {a b : C} (i : iso a b), D i.hom)
export replete_wide_subcategory (mem_iso)

variables {C}
-- mem_id is redundant when we have mem_iso.
lemma replete_wide_subcategory.mk' {D : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí Prop}
  (mem_iso : ‚àÄ {a b : C} (i : iso a b), D i.hom)
  (mem_comp : ‚àÄ {a b c : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c}, D f ‚Üí D g ‚Üí D (g ‚àò f)) :
  replete_wide_subcategory.{v} C D :=
{ mem_id := Œª a, mem_iso (iso.refl a),
  mem_comp := @mem_comp,
  mem_iso := @mem_iso }

variables {D : Œ† ‚¶Éa b : C‚¶Ñ, (a ‚ü∂ b) ‚Üí Prop} [replete_wide_subcategory.{v} C D]

lemma mem_of_mem_comp_left {a b c : C} {f : a ‚ü∂ b} (i : iso b c)
  (h : D (i.hom ‚àò f)) : D f :=
by convert mem_comp h (mem_iso i.symm); simp

lemma mem_of_mem_comp_right {a b c : C} {f : b ‚ü∂ c} (i : iso a b)
  (h : D (f ‚àò i.hom)) : D f :=
by convert mem_comp (mem_iso i.symm) h; simp

lemma mem_iff_mem_of_isomorphic {a b a' b' : C} {f : a ‚ü∂ b} {f' : a' ‚ü∂ b'}
  (i : iso a a') (j : iso b b')
  (e : j.hom ‚àò f = f' ‚àò i.hom) : D f ‚Üî D f' :=
iff.intro
  (assume h, have D (j.hom ‚àò f), from mem_comp h (mem_iso j),
    by rw e at this; exact mem_of_mem_comp_right i this)
  (assume h, have D (f' ‚àò i.hom), from mem_comp (mem_iso i) h,
    by rw ‚Üêe at this; exact mem_of_mem_comp_left j this)

end category_theory
