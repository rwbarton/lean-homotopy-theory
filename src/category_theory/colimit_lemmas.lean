import category_theory.isomorphism

import .colimits

/-

* Notation and lemmas for categories with `has_coproducts`.

* Construction of pushouts in terms of coproducts and coequalizers.

-/

open set

open category_theory.category
local notation f ` ‚àò `:80 g:80 := g ‚â´ f

namespace category_theory

universes v u

section initial
variables {C : Type u} [category.{v} C]
variable [has_initial_object.{v} C]

def initial : C := has_initial_object.initial_object.{v}.ob

instance : has_emptyc C := ‚ü®initial‚ü©

def initial.induced (a : C) : ‚àÖ ‚ü∂ a :=
has_initial_object.initial_object.is_initial_object.induced

notation `!` a := initial.induced a

def initial.uniqueness {a : C} (k k' : ‚àÖ ‚ü∂ a) : k = k' :=
has_initial_object.initial_object.is_initial_object.uniqueness k k'

-- This instance tends not to be very useful because `congr` generates
-- a congruence lemma which is too general, and does not "know" that
-- the domain is ‚àÖ.
instance initial_hom.subsingleton (a : C) : subsingleton (‚àÖ ‚ü∂ a) := ‚ü®initial.uniqueness‚ü©

end initial

section coproduct
variables {C : Type u} [category.{v} C]
variable [has_coproducts.{v} C]

-- The (chosen) coproduct of two objects.
def coprod (a‚ÇÄ a‚ÇÅ : C) :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).ob

infix ` ‚äî `:65 := coprod

-- The "left" inclusion.
def i‚ÇÄ {a‚ÇÄ a‚ÇÅ : C} : a‚ÇÄ ‚ü∂ a‚ÇÄ ‚äî a‚ÇÅ :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).map‚ÇÄ

-- The "right" inclusion.
def i‚ÇÅ {a‚ÇÄ a‚ÇÅ : C} : a‚ÇÅ ‚ü∂ a‚ÇÄ ‚äî a‚ÇÅ :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).map‚ÇÅ

-- The map out of a coproduct induced by a map on each summand.
def coprod.induced {a‚ÇÄ a‚ÇÅ b : C} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b) (f‚ÇÅ : a‚ÇÅ ‚ü∂ b) : a‚ÇÄ ‚äî a‚ÇÅ ‚ü∂ b :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).is_coproduct.induced f‚ÇÄ f‚ÇÅ

def coprod.induced_Is_equiv {a‚ÇÄ a‚ÇÅ b : C} :
  Is_equiv (Œª p : (a‚ÇÄ ‚ü∂ b) √ó (a‚ÇÅ ‚ü∂ b), coprod.induced p.1 p.2) :=
{ e := ((has_coproducts.coproduct a‚ÇÄ a‚ÇÅ).is_coproduct.universal b).e.symm,
  h := by funext p; cases p; refl }

@[simp] lemma coprod.induced_commutes‚ÇÄ {a‚ÇÄ a‚ÇÅ b : C} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b) (f‚ÇÅ : a‚ÇÅ ‚ü∂ b) :
  coprod.induced f‚ÇÄ f‚ÇÅ ‚àò i‚ÇÄ = f‚ÇÄ :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).is_coproduct.induced_commutes‚ÇÄ f‚ÇÄ f‚ÇÅ

@[simp] lemma coprod.induced_commutes‚ÇÅ {a‚ÇÄ a‚ÇÅ b : C} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b) (f‚ÇÅ : a‚ÇÅ ‚ü∂ b) :
  coprod.induced f‚ÇÄ f‚ÇÅ ‚àò i‚ÇÅ = f‚ÇÅ :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).is_coproduct.induced_commutes‚ÇÅ f‚ÇÄ f‚ÇÅ

def coprod.fold (a : C) : a ‚äî a ‚ü∂ a :=
coprod.induced (ùüô a) (ùüô a)

@[simp] lemma coprod.fold_i‚ÇÄ {a : C} : coprod.fold a ‚àò i‚ÇÄ = ùüô a :=
coprod.induced_commutes‚ÇÄ _ _

@[simp] lemma coprod.fold_i‚ÇÅ {a : C} : coprod.fold a ‚àò i‚ÇÅ = ùüô a :=
coprod.induced_commutes‚ÇÅ _ _

-- This is a kind of "co-extensionality" lemma; does that count?
@[ext] lemma coprod.uniqueness {a‚ÇÄ a‚ÇÅ b : C} {k k' : a‚ÇÄ ‚äî a‚ÇÅ ‚ü∂ b}
  (e‚ÇÄ : k ‚àò i‚ÇÄ = k' ‚àò i‚ÇÄ) (e‚ÇÅ : k ‚àò i‚ÇÅ = k' ‚àò i‚ÇÅ) : k = k' :=
(has_coproducts.coproduct.{v} a‚ÇÄ a‚ÇÅ).is_coproduct.uniqueness e‚ÇÄ e‚ÇÅ

lemma coprod.ext {a‚ÇÄ a‚ÇÅ b : C} {k k' : a‚ÇÄ ‚äî a‚ÇÅ ‚ü∂ b} :
  k = k' ‚Üî k ‚àò i‚ÇÄ = k' ‚àò i‚ÇÄ ‚àß k ‚àò i‚ÇÅ = k' ‚àò i‚ÇÅ :=
iff.intro (assume h, by rw h; simp) (assume ‚ü®h‚ÇÄ, h‚ÇÅ‚ü©, coprod.uniqueness h‚ÇÄ h‚ÇÅ)

-- Similarly, this is a "co-eta reduction".
@[simp] lemma coprod.eta {a‚ÇÄ a‚ÇÅ b : C} {k : a‚ÇÄ ‚äî a‚ÇÅ ‚ü∂ b} :
  coprod.induced (k ‚àò i‚ÇÄ) (k ‚àò i‚ÇÅ) = k :=
coprod.uniqueness (by simp) (by simp)

def coprod_of_maps {a‚ÇÄ a‚ÇÅ b‚ÇÄ b‚ÇÅ : C} (f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ) (f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ) : a‚ÇÄ ‚äî a‚ÇÅ ‚ü∂ b‚ÇÄ ‚äî b‚ÇÅ :=
coprod.induced (i‚ÇÄ ‚àò f‚ÇÄ) (i‚ÇÅ ‚àò f‚ÇÅ)

@[simp] lemma coprod_of_maps_commutes‚ÇÄ {a‚ÇÄ a‚ÇÅ b‚ÇÄ b‚ÇÅ : C} {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ} :
  coprod_of_maps f‚ÇÄ f‚ÇÅ ‚àò i‚ÇÄ = i‚ÇÄ ‚àò f‚ÇÄ :=
coprod.induced_commutes‚ÇÄ _ _

@[simp] lemma coprod_of_maps_commutes‚ÇÅ {a‚ÇÄ a‚ÇÅ b‚ÇÄ b‚ÇÅ : C} {f‚ÇÄ : a‚ÇÄ ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a‚ÇÅ ‚ü∂ b‚ÇÅ} :
  coprod_of_maps f‚ÇÄ f‚ÇÅ ‚àò i‚ÇÅ = i‚ÇÅ ‚àò f‚ÇÅ :=
coprod.induced_commutes‚ÇÅ _ _

def isomorphic_coprod_of_Is_coproduct {a‚ÇÄ a‚ÇÅ b : C} {f‚ÇÄ : a‚ÇÄ ‚ü∂ b} {f‚ÇÅ : a‚ÇÅ ‚ü∂ b}
  (h : Is_coproduct f‚ÇÄ f‚ÇÅ) : iso (a‚ÇÄ ‚äî a‚ÇÅ) b :=
{ hom := coprod.induced f‚ÇÄ f‚ÇÅ,
  inv := h.induced i‚ÇÄ i‚ÇÅ,
  hom_inv_id' := by apply coprod.uniqueness; { rw ‚Üêassoc, simp },
  inv_hom_id' := by apply h.uniqueness; { rw ‚Üêassoc, simp } }

def coprod_of_isomorphisms {a‚ÇÄ a‚ÇÅ b‚ÇÄ b‚ÇÅ : C} (j‚ÇÄ : iso a‚ÇÄ b‚ÇÄ) (j‚ÇÅ : iso a‚ÇÅ b‚ÇÅ) :
  iso (a‚ÇÄ ‚äî a‚ÇÅ) (b‚ÇÄ ‚äî b‚ÇÅ) :=
{ hom := coprod_of_maps j‚ÇÄ.hom j‚ÇÅ.hom,
  inv := coprod_of_maps j‚ÇÄ.inv j‚ÇÅ.inv,
  hom_inv_id' := by apply coprod.uniqueness; rw ‚Üêassoc; simp,
  inv_hom_id' := by apply coprod.uniqueness; rw ‚Üêassoc; simp }

variables [has_initial_object.{v} C]

def coprod_initial_right (a : C) : a ‚âÖ a ‚äî ‚àÖ :=
{ hom := i‚ÇÄ,
  inv := coprod.induced (ùüô a) (! a),
  hom_inv_id' := by simp,
  inv_hom_id' :=
    by apply coprod.uniqueness; try { apply initial.uniqueness };
       rw ‚Üêassoc; simp }

@[simp] lemma coprod_initial_right_hom {a : C} : (coprod_initial_right a).hom = i‚ÇÄ :=
rfl

def coprod_initial_left (a : C) : a ‚âÖ ‚àÖ ‚äî a :=
{ hom := i‚ÇÅ,
  inv := coprod.induced (! a) (ùüô a),
  hom_inv_id' := by simp,
  inv_hom_id' :=
    by apply coprod.uniqueness; try { apply initial.uniqueness };
       rw ‚Üêassoc; simp }

@[simp] lemma coprod_initial_left_hom {a : C} : (coprod_initial_left a).hom = i‚ÇÅ :=
rfl

end coproduct


section pushout_induced_eq
parameters {C : Type u} [category.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c c' : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)

lemma pushout_induced_eq_iff {x : C} {h‚ÇÄ : b‚ÇÄ ‚ü∂ x} {h‚ÇÅ : b‚ÇÅ ‚ü∂ x} {k : c ‚ü∂ x} {e}
  (H‚ÇÄ : h‚ÇÄ = g‚ÇÄ ‚â´ k) (H‚ÇÅ : h‚ÇÅ = g‚ÇÅ ‚â´ k) : po.induced h‚ÇÄ h‚ÇÅ e = k :=
by apply po.uniqueness; simp [H‚ÇÄ, H‚ÇÅ]

end pushout_induced_eq


section pushout_induced_comp
parameters {C : Type u} [category.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c c' : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)

lemma pushout_induced_comp {x y : C} {h‚ÇÄ : b‚ÇÄ ‚ü∂ x} {h‚ÇÅ : b‚ÇÅ ‚ü∂ x} {k : x ‚ü∂ y} {e} :
  k ‚àò po.induced h‚ÇÄ h‚ÇÅ e = po.induced (k ‚àò h‚ÇÄ) (k ‚àò h‚ÇÅ)
    (by rw [‚Üêassoc, ‚Üêassoc, e]) :=
by apply po.uniqueness; rw ‚Üêassoc; simp

end pushout_induced_comp

section pushouts_from_coequalizers
parameters {C : Type u} [category.{v} C] [has_coproducts.{v} C]

section construction
parameters {a b‚ÇÄ b‚ÇÅ b c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ} {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c}

def Is_pushout_of_Is_coequalizer
  (H : Is_coequalizer (i‚ÇÄ ‚àò f‚ÇÄ) (i‚ÇÅ ‚àò f‚ÇÅ) (coprod.induced g‚ÇÄ g‚ÇÅ)) :
  Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ :=
Is_pushout.mk'
  (begin convert H.commutes using 1; rw assoc; simp end)
  (Œª x h‚ÇÄ h‚ÇÅ e, H.induced (coprod.induced h‚ÇÄ h‚ÇÅ)
    (begin rw [assoc, assoc], simpa using e end))
  (assume x h‚ÇÄ h‚ÇÅ e,
    -- Weird trick to avoid repeating the proof argument
    (Œª p, let K := H.induced (coprod.induced h‚ÇÄ h‚ÇÅ) p in calc
      K ‚àò g‚ÇÄ = K ‚àò (coprod.induced g‚ÇÄ g‚ÇÅ ‚àò i‚ÇÄ)  : by simp
      ...    = (K ‚àò coprod.induced g‚ÇÄ g‚ÇÅ) ‚àò i‚ÇÄ  : by rw assoc
      ...    = h‚ÇÄ : by simp) _)
  (assume x h‚ÇÄ h‚ÇÅ e,
    (Œª p, let K := H.induced (coprod.induced h‚ÇÄ h‚ÇÅ) p in calc
      K ‚àò g‚ÇÅ = K ‚àò (coprod.induced g‚ÇÄ g‚ÇÅ ‚àò i‚ÇÅ)  : by simp
      ...    = (K ‚àò coprod.induced g‚ÇÄ g‚ÇÅ) ‚àò i‚ÇÅ  : by rw assoc
      ...    = h‚ÇÅ : by simp) _)
  (assume x k k' e‚ÇÄ e‚ÇÅ, H.uniqueness $ coprod.uniqueness
    (by rw [‚Üêassoc, ‚Üêassoc]; simpa using e‚ÇÄ)
    (by rw [‚Üêassoc, ‚Üêassoc]; simpa using e‚ÇÅ))

def pushout_of_coequalizer (E : coequalizer (i‚ÇÄ ‚àò f‚ÇÄ) (i‚ÇÅ ‚àò f‚ÇÅ)) : pushout f‚ÇÄ f‚ÇÅ :=
{ ob := E.ob,
  map‚ÇÄ := E.map ‚àò i‚ÇÄ,
  map‚ÇÅ := E.map ‚àò i‚ÇÅ,
  is_pushout := by
    apply Is_pushout_of_Is_coequalizer; convert E.is_coequalizer; simp }

end construction

def has_pushouts_of_has_coequalizers_and_coproducts [has_coequalizers.{v} C] :
  has_pushouts.{v} C :=
{ pushout := Œª a b‚ÇÄ b‚ÇÅ f‚ÇÄ f‚ÇÅ,
    pushout_of_coequalizer $ has_coequalizers.coequalizer (i‚ÇÄ ‚àò f‚ÇÄ) (i‚ÇÅ ‚àò f‚ÇÅ) }

end pushouts_from_coequalizers


section uniqueness_of_initial_objects
parameters {C : Type u} [category.{v} C]
parameters {a : C} (init : Is_initial_object.{v} a)
parameters {a' : C} (init' : Is_initial_object.{v} a')

def initial_object.unique : iso a a' :=
{ hom := init.induced,
  inv := init'.induced,
  hom_inv_id' := init.uniqueness _ _,
  inv_hom_id' := init'.uniqueness _ _ }

end uniqueness_of_initial_objects

section uniqueness_of_pushouts

parameters {C : Type u} [category.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c c' : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)
parameters {g'‚ÇÄ : b‚ÇÄ ‚ü∂ c'} {g'‚ÇÅ : b‚ÇÅ ‚ü∂ c'} (po' : Is_pushout f‚ÇÄ f‚ÇÅ g'‚ÇÄ g'‚ÇÅ)

@[reducible] private def h : c ‚ü∂ c' := po.induced g'‚ÇÄ g'‚ÇÅ po'.commutes
@[reducible] private def h' : c' ‚ü∂ c := po'.induced g‚ÇÄ g‚ÇÅ po.commutes

def pushout.unique : iso c c' :=
{ hom := h,
  inv := h',
  hom_inv_id' := by apply po.uniqueness; {rw ‚Üêcategory.assoc, simp},
  inv_hom_id' := by apply po'.uniqueness; {rw ‚Üêcategory.assoc, simp} }

@[simp] lemma pushout.unique_commutes‚ÇÄ : pushout.unique.hom ‚àò g‚ÇÄ = g'‚ÇÄ :=
by apply po.induced_commutes‚ÇÄ

@[simp] lemma pushout.unique_commutes‚ÇÅ : pushout.unique.hom ‚àò g‚ÇÅ = g'‚ÇÅ :=
by apply po.induced_commutes‚ÇÅ

end uniqueness_of_pushouts


local notation [parsing_only] a ` ~~ ` b := Bij_on _ a b

section refl
parameters {C : Type u} [category.{v} C]
parameters {a b : C} (f : a ‚ü∂ b)

def Is_pushout.refl : Is_pushout f (ùüô a) (ùüô b) f :=
Is_pushout.mk $ Œª x,
  Bij_on.mk
    { to_fun := Œª h, ‚ü®(h ‚àò ùüô b, h ‚àò f), by simp‚ü©,
      inv_fun := Œª p, ‚ü®p.val.1, trivial‚ü©,
      left_inv := assume h, by simp,
      right_inv := assume ‚ü®‚ü®pv1, pv2‚ü©, pp‚ü©, by simpa using pp }
    (assume h, rfl)

end refl

section isomorphic

parameters {C : Type u} [category.{v} C]

-- TODO: Move this somewhere?
def precomposition_bij {a' a x : C} (i : iso a' a) :
  Bij_on (Œª (k : a ‚ü∂ x), (k ‚àò i.hom : a' ‚ü∂ x)) univ univ :=
Bij_on.of_equiv $ show (a ‚ü∂ x) ‚âÉ (a' ‚ü∂ x), from
{ to_fun := Œª k, k ‚àò i.hom,
  inv_fun := Œª k', k' ‚àò i.inv,
  left_inv := Œª k, by simp,
  right_inv := Œª k', by simp }

parameters {a b‚ÇÄ b‚ÇÅ c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)
parameters {a' b'‚ÇÄ b'‚ÇÅ : C} (f'‚ÇÄ : a' ‚ü∂ b'‚ÇÄ) (f'‚ÇÅ : a' ‚ü∂ b'‚ÇÅ)
parameters (i : iso a' a) (j‚ÇÄ : iso b'‚ÇÄ b‚ÇÄ) (j‚ÇÅ : iso b'‚ÇÅ b‚ÇÅ)
parameters (e‚ÇÄ : f‚ÇÄ ‚àò i.hom = j‚ÇÄ.hom ‚àò f'‚ÇÄ) (e‚ÇÅ : f‚ÇÅ ‚àò i.hom = j‚ÇÅ.hom ‚àò f'‚ÇÅ)

include e‚ÇÄ e‚ÇÅ
def Is_pushout_of_isomorphic : Is_pushout f'‚ÇÄ f'‚ÇÅ (g‚ÇÄ ‚àò j‚ÇÄ.hom) (g‚ÇÅ ‚àò j‚ÇÅ.hom) :=
Is_pushout.mk $ Œª x,
  have _ := calc
  univ ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.1 ‚àò f‚ÇÄ = p.2 ‚àò f‚ÇÅ}
       : po.universal x
  ...  ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | (p.1 ‚àò j‚ÇÄ.hom) ‚àò f'‚ÇÄ = (p.2 ‚àò j‚ÇÅ.hom) ‚àò f'‚ÇÅ}
       : begin
           convert Bij_on.refl _, funext p, apply propext,
           rw [‚Üêassoc, ‚Üêassoc, ‚Üêe‚ÇÄ, ‚Üêe‚ÇÅ], simp [cancel_epi],
         end
  ...  ~~ {p : (b'‚ÇÄ ‚ü∂ x) √ó (b'‚ÇÅ ‚ü∂ x) | p.1 ‚àò f'‚ÇÄ = p.2 ‚àò f'‚ÇÅ}
       : Bij_on.restrict''
           (Bij_on.prod' (precomposition_bij j‚ÇÄ) (precomposition_bij j‚ÇÅ))
           {p | p.1 ‚àò f'‚ÇÄ = p.2 ‚àò f'‚ÇÅ},
  by convert this; funext; simp
omit e‚ÇÄ e‚ÇÅ

parameters {c' : C} (k : iso c c')

def Is_pushout_of_isomorphic' : Is_pushout f‚ÇÄ f‚ÇÅ (k.hom ‚àò g‚ÇÄ) (k.hom ‚àò g‚ÇÅ) :=
Is_pushout.mk $ Œª x,
  have _ := calc
  univ ~~ univ
       : precomposition_bij k
  ...  ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.1 ‚àò f‚ÇÄ = p.2 ‚àò f‚ÇÅ }
       : po.universal x,
  by convert this; funext; simp

end isomorphic

section pushout_tranpose

parameters {C : Type u} [category.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)

def Is_pushout.transpose : Is_pushout f‚ÇÅ f‚ÇÄ g‚ÇÅ g‚ÇÄ :=
Is_pushout.mk $ Œª x, calc
  univ ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.1 ‚àò f‚ÇÄ = p.2 ‚àò f‚ÇÅ}
       : po.universal x
  ...  ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.2 ‚àò f‚ÇÅ = p.1 ‚àò f‚ÇÄ}
       : begin convert Bij_on.refl _; ext p; split; exact eq.symm, end
  ...  ~~ {p' : (b‚ÇÅ ‚ü∂ x) √ó (b‚ÇÄ ‚ü∂ x) | p'.1 ‚àò f‚ÇÅ = p'.2 ‚àò f‚ÇÄ}
       : Bij_on.restrict_equiv (equiv.prod_comm _ _)
           {p' | p'.1 ‚àò f‚ÇÅ = p'.2 ‚àò f‚ÇÄ}

parameters {c' : C} {g‚ÇÄ' : b‚ÇÄ ‚ü∂ c'} {g‚ÇÅ' : b‚ÇÅ ‚ü∂ c'}
parameters (po' : Is_pushout f‚ÇÅ f‚ÇÄ g‚ÇÅ' g‚ÇÄ')
def Is_pushout.iso_transpose : c ‚âÖ c' :=
pushout.unique po.transpose po'

@[simp] lemma Is_pushout.iso_transpose_map‚ÇÄ : g‚ÇÄ ‚â´ (po.iso_transpose po').hom = g‚ÇÄ' :=
by apply pushout.unique_commutes‚ÇÅ

@[simp] lemma Is_pushout.iso_transpose_map‚ÇÅ : g‚ÇÅ ‚â´ (po.iso_transpose po').hom = g‚ÇÅ' :=
by apply pushout.unique_commutes‚ÇÄ

lemma Is_pushout.transpose_induced {x : C} {h‚ÇÄ : b‚ÇÄ ‚ü∂ x} {h‚ÇÅ : b‚ÇÅ ‚ü∂ x} {e : f‚ÇÄ ‚â´ h‚ÇÄ = f‚ÇÅ ‚â´ h‚ÇÅ} :
  (po.iso_transpose po').hom ‚â´ po'.induced h‚ÇÅ h‚ÇÄ e.symm = po.induced h‚ÇÄ h‚ÇÅ e :=
begin
  symmetry,
  apply pushout_induced_eq_iff; rw ‚Üêassoc; simp
end

end pushout_tranpose

section pushout_initial
parameters {C : Type u} [category.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c}

-- TODO: Somehow prove these two simultaneously?
def Is_pushout_of_Is_coproduct_of_Is_initial (copr : Is_coproduct g‚ÇÄ g‚ÇÅ)
  (h : Is_initial_object.{v} a) : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ :=
Is_pushout.mk $ Œª x, calc
  univ ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | true}
       : Bij_on.of_Is_equiv (copr.universal x)
  ...  ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.1 ‚àò f‚ÇÄ = p.2 ‚àò f‚ÇÅ}
       : by convert Bij_on.refl _; ext p; change (_ = _) ‚Üî true;
            simp; apply h.uniqueness

def Is_coproduct_of_Is_pushout_of_Is_initial (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)
  (h : Is_initial_object.{v} a) : Is_coproduct g‚ÇÄ g‚ÇÅ :=
have _ := Œª x, calc
  univ ~~ {p : (b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x) | p.1 ‚àò f‚ÇÄ = p.2 ‚àò f‚ÇÅ}
       : po.universal x
  ...  ~~ (univ : set ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x)))
       : begin
           convert Bij_on.refl _, symmetry, rw ‚Üêuniv_subset_iff,
           intros p _, apply h.uniqueness
         end,
Is_coproduct.mk $ Œª x, (this x).Is_equiv

end pushout_initial

section coprod_of_pushouts

parameters {C : Type u} [category.{v} C] [has_coproducts.{v} C]
parameters {a b‚ÇÄ b‚ÇÅ c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
parameters {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)
parameters {a' b‚ÇÄ' b‚ÇÅ' c' : C} {f‚ÇÄ' : a' ‚ü∂ b‚ÇÄ'} {f‚ÇÅ' : a' ‚ü∂ b‚ÇÅ'}
parameters {g‚ÇÄ' : b‚ÇÄ' ‚ü∂ c'} {g‚ÇÅ' : b‚ÇÅ' ‚ü∂ c'} (po' : Is_pushout f‚ÇÄ' f‚ÇÅ' g‚ÇÄ' g‚ÇÅ')
include po po'

def Is_pushout_coprod :
  Is_pushout
    (coprod_of_maps f‚ÇÄ f‚ÇÄ') (coprod_of_maps f‚ÇÅ f‚ÇÅ')
    (coprod_of_maps g‚ÇÄ g‚ÇÄ') (coprod_of_maps g‚ÇÅ g‚ÇÅ') :=
Is_pushout.mk $ Œª x,
  have _ := calc
  univ ~~ (univ : set ((c ‚ü∂ x) √ó (c' ‚ü∂ x)))
       : Bij_on.of_Is_equiv ((has_coproducts.coproduct c c').is_coproduct.universal x)
  ...  ~~ {pp : ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x)) √ó ((b‚ÇÄ' ‚ü∂ x) √ó (b‚ÇÅ' ‚ü∂ x))
          | pp.1.1 ‚àò f‚ÇÄ = pp.1.2 ‚àò f‚ÇÅ ‚àß pp.2.1 ‚àò f‚ÇÄ' = pp.2.2 ‚àò f‚ÇÅ'}
       :
  begin
    convert Bij_on.prod (po.universal x) (po'.universal x),
    ext p, simp
  end
  ...  ~~ {qq : ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÄ' ‚ü∂ x)) √ó ((b‚ÇÅ ‚ü∂ x) √ó (b‚ÇÅ' ‚ü∂ x))
          | qq.1.1 ‚àò f‚ÇÄ = qq.2.1 ‚àò f‚ÇÅ ‚àß qq.1.2 ‚àò f‚ÇÄ' = qq.2.2 ‚àò f‚ÇÅ'}
       : Bij_on.restrict_equiv
           { to_fun := Œª (pp : ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÅ ‚ü∂ x)) √ó ((b‚ÇÄ' ‚ü∂ x) √ó (b‚ÇÅ' ‚ü∂ x))), ((pp.1.1, pp.2.1), (pp.1.2, pp.2.2)),
             inv_fun := Œª qq, ‚ü®‚ü®qq.1.1, qq.2.1‚ü©, ‚ü®qq.1.2, qq.2.2‚ü©‚ü©,
             left_inv := assume ‚ü®‚ü®_,_‚ü©,‚ü®_,_‚ü©‚ü©, rfl,
             right_inv := assume ‚ü®‚ü®_,_‚ü©,‚ü®_,_‚ü©‚ü©, rfl }
           {qq : ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÄ' ‚ü∂ x)) √ó ((b‚ÇÅ ‚ü∂ x) √ó (b‚ÇÅ' ‚ü∂ x))
          | qq.1.1 ‚àò f‚ÇÄ = qq.2.1 ‚àò f‚ÇÅ ‚àß qq.1.2 ‚àò f‚ÇÄ' = qq.2.2 ‚àò f‚ÇÅ'}
  ...  ~~ {qq : ((b‚ÇÄ ‚ü∂ x) √ó (b‚ÇÄ' ‚ü∂ x)) √ó ((b‚ÇÅ ‚ü∂ x) √ó (b‚ÇÅ' ‚ü∂ x))
          | coprod.induced qq.1.1 qq.1.2 ‚àò coprod_of_maps f‚ÇÄ f‚ÇÄ' =
            coprod.induced qq.2.1 qq.2.2 ‚àò coprod_of_maps f‚ÇÅ f‚ÇÅ' }
       :
  begin
    convert Bij_on.refl _,
    ext qq, change _ = _ ‚Üî _ = _ ‚àß _ = _,
    rw [coprod.ext, ‚Üêassoc, ‚Üêassoc, ‚Üêassoc, ‚Üêassoc],
    simp
  end
  ...  ~~ {qq : (b‚ÇÄ ‚äî b‚ÇÄ' ‚ü∂ x) √ó (b‚ÇÅ ‚äî b‚ÇÅ' ‚ü∂ x)
          | qq.1 ‚àò coprod_of_maps f‚ÇÄ f‚ÇÄ' = qq.2 ‚àò coprod_of_maps f‚ÇÅ f‚ÇÅ'}
       : Bij_on.restrict''
           (Bij_on.prod'
             (Bij_on.of_Is_equiv coprod.induced_Is_equiv)
             (Bij_on.of_Is_equiv coprod.induced_Is_equiv))
           {qq : (b‚ÇÄ ‚äî b‚ÇÄ' ‚ü∂ x) √ó (b‚ÇÅ ‚äî b‚ÇÅ' ‚ü∂ x)
           | qq.1 ‚àò coprod_of_maps f‚ÇÄ f‚ÇÄ' = qq.2 ‚àò coprod_of_maps f‚ÇÅ f‚ÇÅ'},
  begin
    convert this,
    funext k, apply prod.ext; apply coprod.uniqueness;
    { change _ ‚àò _ ‚àò _ = _ ‚àò _, simp [coproduct_comparison],
      rw ‚Üêassoc, simp, refl },
  end

end coprod_of_pushouts

section pushout_i

parameters {C : Type u} [category.{v} C] [has_coproducts.{v} C]
-- Obviously we shouldn't really need C to have an initial object here, but oh well
parameters [has_initial_object.{v} C]
parameters {a b c : C} (f : a ‚ü∂ b)

/-
  a ‚Üí a ‚äî c
  ‚Üì     ‚Üì
  b ‚Üí b ‚äî c
-/

def Is_pushout_i‚ÇÄ : Is_pushout f i‚ÇÄ i‚ÇÄ (coprod_of_maps f (ùüô c)) :=
let po := Is_pushout_coprod (Is_pushout.refl f) (Is_pushout.refl (! c)).transpose in
by convert Is_pushout_of_isomorphic po f i‚ÇÄ
     (coprod_initial_right a) (coprod_initial_right b) (iso.refl _) _ _; simp

/-
  a ‚Üí c ‚äî a
  ‚Üì     ‚Üì
  b ‚Üí c ‚äî b
-/

def Is_pushout_i‚ÇÅ : Is_pushout f i‚ÇÅ i‚ÇÅ (coprod_of_maps (ùüô c) f) :=
let po := Is_pushout_coprod (Is_pushout.refl (! c)).transpose (Is_pushout.refl f) in
by convert Is_pushout_of_isomorphic po f i‚ÇÅ
     (coprod_initial_left a) (coprod_initial_left b) (iso.refl _) _ _; simp

end pushout_i

section pushout_swap
parameters {C : Type u} [category.{v} C]
parameters {a b c : C} {f : a ‚ü∂ b} {g‚ÇÄ g‚ÇÅ : b ‚ü∂ c} (po : Is_pushout f f g‚ÇÄ g‚ÇÅ)

def Is_pushout.swap : c ‚ü∂ c := po.induced g‚ÇÅ g‚ÇÄ po.commutes.symm

def Is_pushout.swap_iso : c ‚âÖ c :=
{ hom := po.swap,
  inv := po.swap,
  hom_inv_id' := by apply po.uniqueness; unfold Is_pushout.swap; rw ‚Üêassoc; simp,
  inv_hom_id' := by apply po.uniqueness; unfold Is_pushout.swap; rw ‚Üêassoc; simp }

@[simp] def Is_pushout.induced_swap {x} {h‚ÇÄ h‚ÇÅ : b ‚ü∂ x} {p p'} :
  po.induced h‚ÇÄ h‚ÇÅ p ‚àò po.swap = po.induced h‚ÇÅ h‚ÇÄ p' :=
by apply po.uniqueness; unfold Is_pushout.swap; rw ‚Üêassoc; simp

end pushout_swap

section pushout_of_maps
parameters {C : Type u} [category.{v} C]
variables {a b‚ÇÄ b‚ÇÅ c : C} {f‚ÇÄ : a ‚ü∂ b‚ÇÄ} {f‚ÇÅ : a ‚ü∂ b‚ÇÅ}
variables {g‚ÇÄ : b‚ÇÄ ‚ü∂ c} {g‚ÇÅ : b‚ÇÅ ‚ü∂ c} (po : Is_pushout f‚ÇÄ f‚ÇÅ g‚ÇÄ g‚ÇÅ)
variables {a' b‚ÇÄ' b‚ÇÅ' c' : C} {f‚ÇÄ' : a' ‚ü∂ b‚ÇÄ'} {f‚ÇÅ' : a' ‚ü∂ b‚ÇÅ'}
variables {g‚ÇÄ' : b‚ÇÄ' ‚ü∂ c'} {g‚ÇÅ' : b‚ÇÅ' ‚ü∂ c'} (po' : Is_pushout f‚ÇÄ' f‚ÇÅ' g‚ÇÄ' g‚ÇÅ')
variables {a'' b‚ÇÄ'' b‚ÇÅ'' c'' : C} {f‚ÇÄ'' : a'' ‚ü∂ b‚ÇÄ''} {f‚ÇÅ'' : a'' ‚ü∂ b‚ÇÅ''}
variables {g‚ÇÄ'' : b‚ÇÄ'' ‚ü∂ c''} {g‚ÇÅ'' : b‚ÇÅ'' ‚ü∂ c''} (po'' : Is_pushout f‚ÇÄ'' f‚ÇÅ'' g‚ÇÄ'' g‚ÇÅ'')
variables (ha : a ‚ü∂ a') (hb‚ÇÄ : b‚ÇÄ ‚ü∂ b‚ÇÄ') (hb‚ÇÅ : b‚ÇÅ ‚ü∂ b‚ÇÅ')
variables (h‚ÇÄ : hb‚ÇÄ ‚àò f‚ÇÄ = f‚ÇÄ' ‚àò ha) (h‚ÇÅ : hb‚ÇÅ ‚àò f‚ÇÅ = f‚ÇÅ' ‚àò ha)
variables (ka : a' ‚ü∂ a'') (kb‚ÇÄ : b‚ÇÄ' ‚ü∂ b‚ÇÄ'') (kb‚ÇÅ : b‚ÇÅ' ‚ü∂ b‚ÇÅ'')
variables (k‚ÇÄ : kb‚ÇÄ ‚àò f‚ÇÄ' = f‚ÇÄ'' ‚àò ka) (k‚ÇÅ : kb‚ÇÅ ‚àò f‚ÇÅ' = f‚ÇÅ'' ‚àò ka)

include po po' h‚ÇÄ h‚ÇÅ

def pushout_of_maps : c ‚ü∂ c' :=
po.induced (g‚ÇÄ' ‚àò hb‚ÇÄ) (g‚ÇÅ' ‚àò hb‚ÇÅ)
  (by rw [‚Üêassoc, ‚Üêassoc, h‚ÇÄ, h‚ÇÅ]; simp [po'.commutes])

omit po po' h‚ÇÄ h‚ÇÅ

lemma induced_pushout_of_maps {x : C} {k‚ÇÄ : b‚ÇÄ' ‚ü∂ x} {k‚ÇÅ : b‚ÇÅ' ‚ü∂ x} {e} :
  po'.induced k‚ÇÄ k‚ÇÅ e ‚àò pushout_of_maps po po' ha hb‚ÇÄ hb‚ÇÅ h‚ÇÄ h‚ÇÅ = po.induced (k‚ÇÄ ‚àò hb‚ÇÄ) (k‚ÇÅ ‚àò hb‚ÇÅ)
    (by rw [‚Üêassoc, ‚Üêassoc, h‚ÇÄ, h‚ÇÅ]; simp [e]) :=
begin
  unfold pushout_of_maps,
  apply po.uniqueness; { rw ‚Üêassoc, simp }
end

@[simp] lemma pushout_of_maps_commutes‚ÇÄ : pushout_of_maps po po' ha hb‚ÇÄ hb‚ÇÅ h‚ÇÄ h‚ÇÅ ‚àò g‚ÇÄ = g‚ÇÄ' ‚àò hb‚ÇÄ :=
by simp [pushout_of_maps]

@[simp] lemma pushout_of_maps_commutes‚ÇÅ : pushout_of_maps po po' ha hb‚ÇÄ hb‚ÇÅ h‚ÇÄ h‚ÇÅ ‚àò g‚ÇÅ = g‚ÇÅ' ‚àò hb‚ÇÅ :=
by simp [pushout_of_maps]

lemma pushout_of_maps_id : pushout_of_maps po po (ùüô a) (ùüô b‚ÇÄ) (ùüô b‚ÇÅ) (by simp) (by simp) = ùüô _ :=
by apply pushout_induced_eq_iff; simp

lemma pushout_of_maps_comp :
  pushout_of_maps po po'' (ha ‚â´ ka) (hb‚ÇÄ ‚â´ kb‚ÇÄ) (hb‚ÇÅ ‚â´ kb‚ÇÅ)
    (by rw [‚Üêassoc, h‚ÇÄ, assoc, k‚ÇÄ, ‚Üêassoc]) (by rw [‚Üêassoc, h‚ÇÅ, assoc, k‚ÇÅ, ‚Üêassoc]) =
  pushout_of_maps po po' ha hb‚ÇÄ hb‚ÇÅ h‚ÇÄ h‚ÇÅ ‚â´ pushout_of_maps po' po'' ka kb‚ÇÄ kb‚ÇÅ k‚ÇÄ k‚ÇÅ :=
by apply pushout_induced_eq_iff; rw ‚Üêassoc; simp

end pushout_of_maps

end category_theory
